import streamlit as st
import json, os, re, hashlib, base64, io, uuid
from fuzzywuzzy import process
from datetime import datetime
from geopy.geocoders import Nominatim
import pandas as pd
from fpdf import FPDF
import qrcode

# --- LOCALIZATION (FULL, ALL 3 LANGUAGES) ---
labels = {
    "English": {
        "submit": "Submit Waste", "material": "Material Type", "login": "MSME Login", "password": "Password",
        "signup": "Sign Up", "location": "Location", "quantity": "Quantity (kg/week)", "invalid_login": "ЁЯФР Invalid login.",
        "header": "Submit Your Waste", "contact": "Contact Info", "quality": "Quality", "public_contact": "Show contact publicly",
        "account_created": "тЬЕ Account created! Please log in.", "duplicate_id": "ЁЯЪл ID already exists.",
        "missing_fields": "Please fill all fields.", "logout": "Logout", "back": "Back", "success": "Submission saved.",
        "upload_image": "Upload a picture of the waste", "matched": "Matched",
        "go_home": "Go Home", "invalid_contact": "Invalid contact.",
        "filter_material": "Filter by Material", "filter_location": "Filter by Location",
        "browse_waste": "Browse Waste Listings", "all": "All", "kg_week": "kg/week",
        "clean": "Clean", "mixed": "Mixed", "contaminated": "Contaminated",
        "my_submissions": "My Submissions", "analytics": "Analytics", "microplanner": "Micro-unit Planner", "export": "Export Data",
        "admin_panel": "Admin Panel", "top_materials": "Top Submitted Materials",
        "no_data": "No data found yet.", "no_entries": "You haven't submitted any waste yet.",
        "delete_success": "тЬЕ Submission deleted successfully.", "download_csv": "Download CSV",
        "browse": "Browse Materials", "otp": "Enter OTP sent to your email (1234)",
        "verify": "Verify", "verified": "Verified MSME ЁЯЯв", "not_verified": "Not Verified ЁЯФ┤",
        "rate": "Rate this user", "rating": "Rating", "submit_rating": "Submit Rating", "thanks_rating": "Thanks for rating!",
        "success_story": "ЁЯМЯ Success Stories", "share_story": "Share Your Story", "submit_story": "Submit Story",
        "story_submitted": "Story submitted!", "impact_dash": "ЁЯМП Impact Dashboard",
        "register_interest": "ЁЯФФ Register Interest", "interest_material": "Material", "interest_location": "Preferred Location",
        "interest_registered": "Interest registered! You'll see matches on your dashboard.",
        "your_interests": "Your Registered Interests", "msg": "ЁЯТм Messages", "send": "Send",
        "howto": "ЁЯОУ How-to & Adoption", "ai_help": "ЁЯдЦ Need help? Ask our FAQ bot below:",
        "download_cert": "ЁЯОУ Download Green MSME Certificate",
        "profile": "Profile", "leaderboard": "ЁЯПЖ Top Contributors", "badge_gold": "ЁЯеЗ Gold Contributor",
        "badge_silver": "ЁЯеИ Silver Contributor", "badge_bronze": "ЁЯеЙ Bronze Contributor",
        "add_story_video": "Add Your Story/Video", "video_url": "Paste YouTube Link of Your Story/Innovation",
        "story_title": "Story Title", "story_desc": "Write your story/impact here", "submit_video": "Submit Video Story",
        "video_submitted": "Video/Story submitted!", "faq_title": "тЭУ MSME FAQ Bot", "ask_question": "Ask your question",
        "ask": "Ask", "video_section": "ЁЯОм Community Videos & Stories", "no_video_stories": "No video stories yet.",
        "report_listing": "ЁЯЪй Report Listing", "reported": "Reported. Thank you!", "already_reported": "Already reported.",
        "privacy": "Privacy Policy", "privacy_summary": "We only show contact info if you allow it. Your data is never sold.",
        "show_contact": "Show my contact info on listings", "hide_contact": "Hide my contact info",
        "notifications": "ЁЯФФ Notifications", "no_notifications": "No new notifications.",
        "batch_pickup": "Join Batch Pickup", "joined_batch": "You joined this batch!", "already_joined": "Already joined.",
        "progress": "Your Green Progress", "next_badge": "Next badge at", "early_adopter": "ЁЯМ▒ Early Adopter",
        "whatsapp": "Join WhatsApp Community", "howto_desc": "Watch demo, join community, and see how to get the most out of BioLoop.",
        "admin_review": "Admin Review Pending", "gstin": "GSTIN (for verification)", "submit_signup": "Register",
        "admin_approve": "Approve", "admin_reject": "Reject", "approved": "Approved!", "rejected": "Rejected."
    },
    "родрооро┐ро┤рпН": {
        "submit": "роХро┤ро┐ро╡рпИ роЪрооро░рпНрокрпНрокро┐", "material": "рокрпЖро╛ро░рпБро│рпН ро╡роХрпИ", "login": "роЙро│рпНроирпБро┤рпИ", "password": "роХроЯро╡рпБроЪрпНроЪрпЖро╛ро▓рпН",
        "signup": "рокродро┐ро╡рпБ роЪрпЖропрпН", "location": "роЗроЯроорпН", "quantity": "роЕро│ро╡рпБ (роХро┐ро▓рпЛ/ро╡ро╛ро░роорпН)", "invalid_login": "ЁЯФР родро╡ро▒ро╛рой роЙро│рпНроирпБро┤рпИро╡рпБ.",
        "header": "роЙроЩрпНроХро│рпН роХро┤ро┐ро╡рпИ роЪрооро░рпНрокрпНрокро┐роХрпНроХро╡рпБроорпН", "contact": "родрпКроЯро░рпНрокрпБ родроХро╡ро▓рпН", "quality": "родро░роорпН",
        "public_contact": "родрпКроЯро░рпНрокрпБ рокрпКродрпБро╡ро╛роХ", "account_created": "тЬЕ роХрогроХрпНроХрпБ роЙро░рпБро╡ро╛роХрпНроХрокрпНрокроЯрпНроЯродрпБ! роЙро│рпНроирпБро┤рпИропро╡рпБроорпН.",
        "duplicate_id": "ЁЯЪл роРроЯро┐ роПро▒рпНроХройро╡рпЗ роЙро│рпНро│родрпБ.", "missing_fields": "роЙроЩрпНроХро│рпН родроХро╡ро▓рпИ роиро┐ро░рокрпНрокро╡рпБроорпН.",
        "logout": "ро╡рпЖро│ро┐ропрпЗро▒рпБ", "back": "рокро┐ройрпНройро╛ро▓рпН", "success": "роЪрооро░рпНрокрпНрокро┐рокрпНрокрпБ роЪрпЗрооро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ.",
        "upload_image": "роХро┤ро┐ро╡ро┐ройрпН рокроЯродрпНродрпИ рокродро┐ро╡рпЗро▒рпНро▒рпБ", "matched": "рокрпКро░рпБроирпНродро┐ропродрпБ",
        "go_home": "роорпБродройрпНроорпИ рокроХрпНроХроорпН", "invalid_contact": "родро╡ро▒ро╛рой родрпКроЯро░рпНрокрпБ.",
        "filter_material": "рокрпКро░рпБро│рпН роорпВро▓роорпН ро╡роЯро┐роХроЯрпНроЯрпБ", "filter_location": "роЗроЯроорпН роорпВро▓роорпН ро╡роЯро┐роХроЯрпНроЯрпБ",
        "browse_waste": "роХро┤ро┐ро╡рпБроХро│рпИроХрпН роХро╛рог", "all": "роЕройрпИродрпНродрпБроорпН", "kg_week": "роХро┐ро▓рпЛ/ро╡ро╛ро░роорпН",
        "clean": "роЪрпБродрпНродроорпН", "mixed": "роХро▓роирпНродродрпБ", "contaminated": "роХро┤ро┐ро╡ро╛ройродрпБ",
        "my_submissions": "роОройрпН роЪрооро░рпНрокрпНрокро┐рокрпНрокрпБроХро│рпН", "analytics": "рокроХрпБрокрпНрокро╛ропрпНро╡рпБ", "microplanner": "роорпИроХрпНро░рпЛ ропрпВройро┐роЯрпН родро┐роЯрпНроЯроорпН", "export": "родро░ро╡рпБ роПро▒рпНро▒рпБ",
        "admin_panel": "роиро┐ро░рпНро╡ро╛роХрокрпН рокро▓роХрпИ", "top_materials": "роорпЗроорпНрокроЯрпНроЯ рокрпКро░рпБро│рпНроХро│рпН",
        "no_data": "родро░ро╡рпБ роЗро▓рпНро▓рпИ.", "no_entries": "роирпАроЩрпНроХро│рпН роЗройрпНройрпБроорпН роЪрооро░рпНрокрпНрокро┐роХрпНроХро╡ро┐ро▓рпНро▓рпИ.",
        "delete_success": "тЬЕ роЪрооро░рпНрокрпНрокро┐рокрпНрокрпБ роирпАроХрпНроХрокрпНрокроЯрпНроЯродрпБ.", "download_csv": "CSV рокродро┐ро╡ро┐ро▒роХрпНроХрпБ",
        "browse": "рокрпКро░рпБро│рпНроХро│рпН рокро╛ро░рпНроХрпНроХ", "otp": "роЙроЩрпНроХро│рпН рооро┐ройрпНройроЮрпНроЪро▓ро┐ро▓рпН OTP роЙро│рпНро│ро┐роЯро╡рпБроорпН (1234)",
        "verify": "роЪро░ро┐рокро╛ро░рпНроХрпНроХ", "verified": "роЪро░ро┐рокро╛ро░рпНроХрпНроХрокрпНрокроЯрпНроЯ MSME ЁЯЯв", "not_verified": "роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡ро┐ро▓рпНро▓рпИ ЁЯФ┤",
        "rate": "роЗроирпНрод рокропройро░рпИ роородро┐рокрпНрокро┐роЯрпБ", "rating": "роородро┐рокрпНрокрпАроЯрпБ", "submit_rating": "роородро┐рокрпНрокрпАроЯрпБ роЪрооро░рпНрокрпНрокро┐", "thanks_rating": "роородро┐рокрпНрокрпАроЯрпНроЯрпБроХрпНроХрпБ роиройрпНро▒ро┐!",
        "success_story": "ЁЯМЯ ро╡рпЖро▒рпНро▒ро┐ роХродрпИроХро│рпН", "share_story": "роЙроЩрпНроХро│рпН роХродрпИропрпИ рокроХро┐ро░ро╡рпБроорпН", "submit_story": "роХродрпИ роЪрооро░рпНрокрпНрокро┐",
        "story_submitted": "роХродрпИ роЪрооро░рпНрокрпНрокро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ!", "impact_dash": "ЁЯМП родро╛роХрпНроХроорпН",
        "register_interest": "ЁЯФФ ро╡ро┐ро░рпБрокрпНрокроорпН рокродро┐ро╡рпБ роЪрпЖропрпН", "interest_material": "рокрпКро░рпБро│рпН", "interest_location": "ро╡ро┐ро░рпБрокрпНрок роЗроЯроорпН",
        "interest_registered": "ро╡ро┐ро░рпБрокрпНрокроорпН рокродро┐ро╡рпБ роЪрпЖропрпНропрокрпНрокроЯрпНроЯродрпБ!", "your_interests": "роЙроЩрпНроХро│рпН ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпН", "msg": "ЁЯТм роЪрпЖропрпНродро┐роХро│рпН", "send": "роЕройрпБрокрпНрокрпБ",
        "howto": "ЁЯОУ роОрокрпНрокроЯро┐ & роПро▒рпНроХрпБродро▓рпН", "ai_help": "ЁЯдЦ роЙродро╡ро┐ родрпЗро╡рпИ? FAQ роР роХрпЗро│рпБроЩрпНроХро│рпН:",
        "download_cert": "ЁЯОУ рокроЪрпБроорпИ MSME роЪро╛ройрпНро▒ро┐родро┤рпН рокродро┐ро╡ро┐ро▒роХрпНроХ",
        "profile": "роЪрпБропро╡ро┐ро╡ро░роорпН", "leaderboard": "ЁЯПЖ роЪро┐ро▒роирпНрод рокроЩрпНроХро│ро┐рокрпНрокро╛ро│ро░рпНроХро│рпН", "badge_gold": "ЁЯеЗ родроЩрпНроХроорпН",
        "badge_silver": "ЁЯеИ ро╡рпЖро│рпНро│ро┐", "badge_bronze": "ЁЯеЙ ро╡рпЖрогрпНроХро▓роорпН",
        "add_story_video": "роЙроЩрпНроХро│рпН роХродрпИ/ро╡рпАроЯро┐ропрпЛ роЪрпЗро░рпНроХрпНроХро╡рпБроорпН", "video_url": "роЙроЩрпНроХро│рпН YouTube роЗрогрпИрокрпНрокрпБ",
        "story_title": "роХродрпИ родро▓рпИрокрпНрокрпБ", "story_desc": "роЙроЩрпНроХро│рпН роХродрпИ/родро╛роХрпНроХроорпН роОро┤рпБродро╡рпБроорпН", "submit_video": "ро╡рпАроЯро┐ропрпЛ роЪрооро░рпНрокрпНрокро┐",
        "video_submitted": "ро╡рпАроЯро┐ропрпЛ роЪрооро░рпНрокрпНрокро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ!", "faq_title": "тЭУ MSME FAQ Bot", "ask_question": "роЙроЩрпНроХро│рпН роХрпЗро│рпНро╡ро┐ роХрпЗро│рпБроЩрпНроХро│рпН",
        "ask": "роХрпЗро│рпН", "video_section": "ЁЯОм роЪроорпВроХ ро╡рпАроЯро┐ропрпЛроХрпНроХро│рпН", "no_video_stories": "ро╡рпАроЯро┐ропрпЛроХрпНроХро│рпН роЗро▓рпНро▓рпИ.",
        "report_listing": "ЁЯЪй рокроЯрпНроЯро┐ропро▓рпИ рокрпБроХро╛ро░рпН роЪрпЖропрпН", "reported": "рокрпБроХро╛ро░рпН роЪрпЖропрпНропрокрпНрокроЯрпНроЯродрпБ!", "already_reported": "роПро▒рпНроХройро╡рпЗ рокрпБроХро╛ро░рпН роЪрпЖропрпНропрокрпНрокроЯрпНроЯродрпБ.",
        "privacy": "родройро┐ропрпБро░ро┐роорпИроХрпН роХрпКро│рпНроХрпИ", "privacy_summary": "роЙроЩрпНроХро│рпН родрпКроЯро░рпНрокрпБ родроХро╡ро▓рпН рокрпКродрпБро╡ро╛роХ роХро╛роЯрпНроЯрокрпНрокроЯрпБроорпН. роЙроЩрпНроХро│рпН родро░ро╡рпБ ро╡ро┐ро▒рпНроХрокрпНрокроЯро╛родрпБ.",
        "show_contact": "рокроЯрпНроЯро┐ропро▓ро┐ро▓рпН родрпКроЯро░рпНрокрпБ родроХро╡ро▓рпН роХро╛роЯрпНроЯро╡рпБроорпН", "hide_contact": "рокроЯрпНроЯро┐ропро▓ро┐ро▓рпН роХро╛роЯрпНроЯ ро╡рпЗрогрпНроЯро╛роорпН",
        "notifications": "ЁЯФФ роЕро▒ро┐ро╡ро┐рокрпНрокрпБроХро│рпН", "no_notifications": "роЕро▒ро┐ро╡ро┐рокрпНрокрпБроХро│рпН роЗро▓рпНро▓рпИ.",
        "batch_pickup": "рокрпЗроЯрпНроЪрпН рокро┐роХрпН-роЕрокрпН роЪрпЗро░", "joined_batch": "роирпАроЩрпНроХро│рпН рокрпЗроЯрпНроЪро┐ро▓рпН роЪрпЗро░рпНроирпНродрпБро│рпНро│рпАро░рпНроХро│рпН!", "already_joined": "роПро▒рпНроХройро╡рпЗ роЪрпЗро░рпНроирпНродрпБро│рпНро│рпАро░рпНроХро│рпН.",
        "progress": "роЙроЩрпНроХро│рпН рокроЪрпБроорпИ ро╡ро│ро░рпНроЪрпНроЪро┐", "next_badge": "роЕроЯрпБродрпНрод рокрпЗроЯрпНроЬрпН", "early_adopter": "ЁЯМ▒ роЖро░роорпНрок рокроЩрпНроХро╛ро│ро░рпН",
        "whatsapp": "WhatsApp роЪроорпВроХродрпНродрпИроЪрпН роЪрпЗро░", "howto_desc": "роЯрпЖроорпЛ рокро╛ро░рпНроХрпНроХ, роЪроорпВроХродрпНродрпИроЪрпН роЪрпЗро░, BioLoop роР роорпБро┤рпБроорпИропро╛роХ рокропройрпНрокроЯрпБродрпНродрпБроЩрпНроХро│рпН.",
        "admin_review": "роиро┐ро░рпНро╡ро╛роХрокрпН рокро░ро┐роЪрпАро▓ройрпИ", "gstin": "GSTIN (роЪро░ро┐рокро╛ро░рпНрокрпНрокрпБ)", "submit_signup": "рокродро┐ро╡рпБ роЪрпЖропрпН",
        "admin_approve": "роЕроЩрпНроХрпАроХро░ро┐", "admin_reject": "роиро┐ро░ро╛роХро░ро┐", "approved": "роЕроЩрпНроХрпАроХро░ро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ!", "rejected": "роиро┐ро░ро╛роХро░ро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ."
    },
    "рд╣рд┐рдиреНрджреА": {
        "submit": "рдЕрдкрд╢рд┐рд╖реНрдЯ рдЬрдорд╛ рдХрд░реЗрдВ", "material": "рд╕рд╛рдордЧреНрд░реА рдкреНрд░рдХрд╛рд░", "login": "рдПрдордПрд╕рдПрдордИ рд▓реЙрдЧрд┐рди", "password": "рдкрд╛рд╕рд╡рд░реНрдб",
        "signup": "рд╕рд╛рдЗрди рдЕрдк", "location": "рд╕реНрдерд╛рди", "quantity": "рдорд╛рддреНрд░рд╛ (рдХрд┐рд▓реЛ/рд╕рдкреНрддрд╛рд╣)", "invalid_login": "ЁЯФР рдЕрдорд╛рдиреНрдп рд▓реЙрдЧрд┐рди.",
        "header": "рдЕрдкрдирд╛ рдЕрдкрд╢рд┐рд╖реНрдЯ рдЬрдорд╛ рдХрд░реЗрдВ", "contact": "рд╕рдВрдкрд░реНрдХ рдЬрд╛рдирдХрд╛рд░реА", "quality": "рдЧреБрдгрд╡рддреНрддрд╛",
        "public_contact": "рд╕рдВрдкрд░реНрдХ рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рд░реВрдк рд╕реЗ рджрд┐рдЦрд╛рдПрдВ", "account_created": "тЬЕ рдЦрд╛рддрд╛ рдмрди рдЧрдпрд╛! рдХреГрдкрдпрд╛ рд▓реЙрдЧрд┐рди рдХрд░реЗрдВ.",
        "duplicate_id": "ЁЯЪл рдЖрдИрдбреА рдкрд╣рд▓реЗ рд╕реЗ рдореМрдЬреВрдж рд╣реИ.", "missing_fields": "рдХреГрдкрдпрд╛ рд╕рднреА рдлрд╝реАрд▓реНрдб рднрд░реЗрдВ.",
        "logout": "рд▓реЙрдЧрдЖрдЙрдЯ", "back": "рд╡рд╛рдкрд╕", "success": "рдЬрдорд╛ рд╕рдлрд▓ рд░рд╣рд╛.",
        "upload_image": "рдЕрдкрд╢рд┐рд╖реНрдЯ рдХреА рддрд╕реНрд╡реАрд░ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ", "matched": "рдорд┐рд▓рд╛рди рд╣реБрдЖ",
        "go_home": "рд╣реЛрдо рдкрд░ рдЬрд╛рдПрдВ", "invalid_contact": "рдЕрдорд╛рдиреНрдп рд╕рдВрдкрд░реНрдХ.",
        "filter_material": "рд╕рд╛рдордЧреНрд░реА рд╕реЗ рдлрд╝рд┐рд▓реНрдЯрд░ рдХрд░реЗрдВ", "filter_location": "рд╕реНрдерд╛рди рд╕реЗ рдлрд╝рд┐рд▓реНрдЯрд░ рдХрд░реЗрдВ",
        "browse_waste": "рдЕрдкрд╢рд┐рд╖реНрдЯ рд▓рд┐рд╕реНрдЯрд┐рдВрдЧ рджреЗрдЦреЗрдВ", "all": "рд╕рднреА", "kg_week": "рдХрд┐рд▓реЛ/рд╕рдкреНрддрд╛рд╣",
        "clean": "рд╕реНрд╡рдЪреНрдЫ", "mixed": "рдорд┐рд╢реНрд░рд┐рдд", "contaminated": "рджреВрд╖рд┐рдд",
        "my_submissions": "рдореЗрд░реА рдЬрдорд╛", "analytics": "рдПрдирд╛рд▓рд┐рдЯрд┐рдХреНрд╕", "microplanner": "рдорд╛рдЗрдХреНрд░реЛ-рдпреВрдирд┐рдЯ рдпреЛрдЬрдирд╛рдХрд░реНрддрд╛", "export": "рдбрд╛рдЯрд╛ рдПрдХреНрд╕рдкреЛрд░реНрдЯ",
        "admin_panel": "рдПрдбрдорд┐рди рдкреИрдирд▓", "top_materials": "рд╢реАрд░реНрд╖ рдЬрдорд╛ рд╕рд╛рдордЧреНрд░реА",
        "no_data": "рдбрд╛рдЯрд╛ рдирд╣реАрдВ рдорд┐рд▓рд╛.", "no_entries": "рдЖрдкрдиреЗ рдЕрднреА рддрдХ рдХреЛрдИ рдЕрдкрд╢рд┐рд╖реНрдЯ рдЬрдорд╛ рдирд╣реАрдВ рдХрд┐рдпрд╛.",
        "delete_success": "тЬЕ рдЬрдорд╛ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╣рдЯрд╛рдпрд╛ рдЧрдпрд╛.", "download_csv": "CSV рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ",
        "browse": "рд╕рд╛рдордЧреНрд░реА рдмреНрд░рд╛рдЙрдЬрд╝ рдХрд░реЗрдВ", "otp": "рдЕрдкрдиреЗ рдИрдореЗрд▓ рдкрд░ рднреЗрдЬрд╛ рдЧрдпрд╛ OTP рдбрд╛рд▓реЗрдВ (1234)",
        "verify": "рд╡реЗрд░реАрдлрд╛рдИ рдХрд░реЗрдВ", "verified": "рд╡реЗрд░реАрдлрд╛рдИрдб MSME ЁЯЯв", "not_verified": "рд╡реЗрд░реАрдлрд╛рдИ рдирд╣реАрдВ рд╣реБрдЖ ЁЯФ┤",
        "rate": "рдЗрд╕ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рд░реЗрдЯ рдХрд░реЗрдВ", "rating": "рд░реЗрдЯрд┐рдВрдЧ", "submit_rating": "рд░реЗрдЯрд┐рдВрдЧ рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВ", "thanks_rating": "рд░реЗрдЯрд┐рдВрдЧ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж!",
        "success_story": "ЁЯМЯ рд╕рдлрд▓рддрд╛ рдХреА рдХрд╣рд╛рдирд┐рдпрд╛рдБ", "share_story": "рдЕрдкрдиреА рдХрд╣рд╛рдиреА рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ", "submit_story": "рдХрд╣рд╛рдиреА рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВ",
        "story_submitted": "рдХрд╣рд╛рдиреА рд╕рдмрдорд┐рдЯ рд╣реЛ рдЧрдИ!", "impact_dash": "ЁЯМП рдкреНрд░рднрд╛рд╡ рдбреИрд╢рдмреЛрд░реНрдб",
        "register_interest": "ЁЯФФ рд░реБрдЪрд┐ рджрд░реНрдЬ рдХрд░реЗрдВ", "interest_material": "рд╕рд╛рдордЧреНрд░реА", "interest_location": "рд╡рд╛рдВрдЫрд┐рдд рд╕реНрдерд╛рди",
        "interest_registered": "рд░реБрдЪрд┐ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рджрд░реНрдЬ рд╣реЛ рдЧрдИ!", "your_interests": "рдЖрдкрдХреА рджрд░реНрдЬ рд░реБрдЪрд┐рдпрд╛рдБ", "msg": "ЁЯТм рд╕рдВрджреЗрд╢", "send": "рднреЗрдЬреЗрдВ",
        "howto": "ЁЯОУ рдХреИрд╕реЗ рдХрд░реЗрдВ & рдЕрдкрдирд╛рдПрдБ", "ai_help": "ЁЯдЦ рд╕рд╣рд╛рдпрддрд╛ рдЪрд╛рд╣рд┐рдП? рдиреАрдЪреЗ рд╣рдорд╛рд░реЗ FAQ рдмреЙрдЯ рд╕реЗ рдкреВрдЫреЗрдВ:",
        "download_cert": "ЁЯОУ рдЧреНрд░реАрди MSME рдкреНрд░рдорд╛рдгрдкрддреНрд░ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ",
        "profile": "рдкреНрд░реЛрдлрд╛рдЗрд▓", "leaderboard": "ЁЯПЖ рд╢реАрд░реНрд╖ рдпреЛрдЧрджрд╛рдирдХрд░реНрддрд╛", "badge_gold": "ЁЯеЗ рдЧреЛрд▓реНрдб",
        "badge_silver": "ЁЯеИ рд╕рд┐рд▓реНрд╡рд░", "badge_bronze": "ЁЯеЙ рдмреНрд░реЙрдиреНрдЬ",
        "add_story_video": "рдЕрдкрдиреА рдХрд╣рд╛рдиреА/рд╡реАрдбрд┐рдпреЛ рдЬреЛрдбрд╝реЗрдВ", "video_url": "рдЕрдкрдиреА рдХрд╣рд╛рдиреА/рдирд╡рд╛рдЪрд╛рд░ рдХрд╛ YouTube рд▓рд┐рдВрдХ рдбрд╛рд▓реЗрдВ",
        "story_title": "рдХрд╣рд╛рдиреА рд╢реАрд░реНрд╖рдХ", "story_desc": "рдпрд╣рд╛рдБ рдЕрдкрдиреА рдХрд╣рд╛рдиреА/рдкреНрд░рднрд╛рд╡ рд▓рд┐рдЦреЗрдВ", "submit_video": "рд╡реАрдбрд┐рдпреЛ рдХрд╣рд╛рдиреА рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВ",
        "video_submitted": "рд╡реАрдбрд┐рдпреЛ/рдХрд╣рд╛рдиреА рд╕рдмрдорд┐рдЯ рд╣реЛ рдЧрдИ!", "faq_title": "тЭУ MSME FAQ Bot", "ask_question": "рдЕрдкрдирд╛ рд╕рд╡рд╛рд▓ рдкреВрдЫреЗрдВ",
        "ask": "рдкреВрдЫреЗрдВ", "video_section": "ЁЯОм рд╕рдореБрджрд╛рдп рд╡реАрдбрд┐рдпреЛ/рдХрд╣рд╛рдирд┐рдпрд╛рдБ", "no_video_stories": "рдЕрднреА рдХреЛрдИ рд╡реАрдбрд┐рдпреЛ рдирд╣реАрдВ.",
        "report_listing": "ЁЯЪй рд▓рд┐рд╕реНрдЯрд┐рдВрдЧ рд░рд┐рдкреЛрд░реНрдЯ рдХрд░реЗрдВ", "reported": "рд░рд┐рдкреЛрд░реНрдЯ рдХрд┐рдпрд╛ рдЧрдпрд╛! рдзрдиреНрдпрд╡рд╛рдж!", "already_reported": "рдкрд╣рд▓реЗ рд╣реА рд░рд┐рдкреЛрд░реНрдЯ рдХрд┐рдпрд╛ рдЧрдпрд╛.",
        "privacy": "рдЧреЛрдкрдиреАрдпрддрд╛ рдиреАрддрд┐", "privacy_summary": "рд╣рдо рдХреЗрд╡рд▓ рддрднреА рд╕рдВрдкрд░реНрдХ рджрд┐рдЦрд╛рддреЗ рд╣реИрдВ рдЬрдм рдЖрдк рдЕрдиреБрдорддрд┐ рджреЗрдВ. рдЖрдкрдХрд╛ рдбрд╛рдЯрд╛ рдХрднреА рдмреЗрдЪрд╛ рдирд╣реАрдВ рдЬрд╛рддрд╛.",
        "show_contact": "рд▓рд┐рд╕реНрдЯрд┐рдВрдЧ рдкрд░ рдореЗрд░рд╛ рд╕рдВрдкрд░реНрдХ рджрд┐рдЦрд╛рдПрдБ", "hide_contact": "рд▓рд┐рд╕реНрдЯрд┐рдВрдЧ рдкрд░ рдореЗрд░рд╛ рд╕рдВрдкрд░реНрдХ рдЫрд┐рдкрд╛рдПрдБ",
        "notifications": "ЁЯФФ рд╕реВрдЪрдирд╛рдПрдБ", "no_notifications": "рдХреЛрдИ рдирдпреА рд╕реВрдЪрдирд╛ рдирд╣реАрдВ.",
        "batch_pickup": "рдмреИрдЪ рдкрд┐рдХрдЕрдк рд╕реЗ рдЬреБрдбрд╝реЗрдВ", "joined_batch": "рдЖрдкрдиреЗ рдЗрд╕ рдмреИрдЪ рдореЗрдВ рднрд╛рдЧ рд▓рд┐рдпрд╛!", "already_joined": "рдкрд╣рд▓реЗ рд╣реА рдЬреБрдбрд╝ рдЪреБрдХреЗ рд╣реИрдВ.",
        "progress": "рдЖрдкрдХреА рдЧреНрд░реАрди рдкреНрд░рдЧрддрд┐", "next_badge": "рдЕрдЧрд▓рд╛ рдмреИрдЬ", "early_adopter": "ЁЯМ▒ рд╢реБрд░реБрдЖрддреА",
        "whatsapp": "WhatsApp рд╕рдореБрджрд╛рдп рд╕реЗ рдЬреБрдбрд╝реЗрдВ", "howto_desc": "рдбреЗрдореЛ рджреЗрдЦреЗрдВ, рд╕рдореБрджрд╛рдп рд╕реЗ рдЬреБрдбрд╝реЗрдВ, рдФрд░ BioLoop рдХрд╛ рдЕрдзрд┐рдХрддрдо рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ.",
        "admin_review": "рдПрдбрдорд┐рди рд╕рдореАрдХреНрд╖рд╛ рдЪрд▓ рд░рд╣реА рд╣реИ", "gstin": "GSTIN (рд╕рддреНрдпрд╛рдкрди)", "submit_signup": "рд░рдЬрд┐рд╕реНрдЯрд░ рдХрд░реЗрдВ",
        "admin_approve": "рд╕реНрд╡реАрдХреГрдд рдХрд░реЗрдВ", "admin_reject": "рдЕрд╕реНрд╡реАрдХреГрдд рдХрд░реЗрдВ", "approved": "рд╕реНрд╡реАрдХреГрдд!", "rejected": "рдЕрд╕реНрд╡реАрдХреГрдд."
    }
}

def L(key): 
    lang = st.session_state.get("lang", "English")
    return labels.get(lang, labels["English"]).get(key, key)

# --- DATA FILES ---
DATA_FILE = "data/waste_profiles.json"
USER_FILE = "data/users.json"
INTERESTS_FILE = "data/interests.json"
MESSAGES_FILE = "data/community_messages.json"
STORIES_FILE = "data/success_stories.json"
RATINGS_FILE = "data/ratings.json"
REPORTS_FILE = "data/reports.json"
BATCHES_FILE = "data/batch_pickups.json"
NOTIFICATIONS_FILE = "data/notifications.json"
REFERRALS_FILE = "data/referrals.json"
GUIDES_FILE = "data/upcycling_guides.json"
os.makedirs("data", exist_ok=True)
for f in [DATA_FILE, USER_FILE, INTERESTS_FILE, STORIES_FILE, RATINGS_FILE, REPORTS_FILE, BATCHES_FILE, NOTIFICATIONS_FILE, MESSAGES_FILE, REFERRALS_FILE, GUIDES_FILE]:
    if not os.path.exists(f):
        with open(f, "w") as file:
            json.dump([] if f.endswith(".json") else {}, file)

# --- UTILITY FUNCTIONS ---
def load_datafile(path, default=None):
    if not os.path.exists(path): return default
    with open(path) as f:
        try: return json.load(f)
        except: return default

def save_datafile(path, data):
    with open(path, "w") as f: json.dump(data, f, indent=2)

def load_data(): return load_datafile(DATA_FILE, [])
def save_data(data): save_datafile(DATA_FILE, data)
def load_users(): return load_datafile(USER_FILE, {})
def save_users(users): save_datafile(USER_FILE, users)
def add_notification(user, msg):
    notifs = load_datafile(NOTIFICATIONS_FILE, [])
    notifs.append({"user": user, "msg": msg, "time": datetime.now().isoformat()})
    save_datafile(NOTIFICATIONS_FILE, notifs)
def get_user_rating(user_id):
    ratings = load_datafile(RATINGS_FILE, [])
    user_ratings = [r["rating"] for r in ratings if r["user"] == user_id]
    return round(sum(user_ratings) / len(user_ratings), 1) if user_ratings else "N/A"
def generate_trace_hash(entry):
    raw = f"{entry['material']}{entry['quantity']}{entry['location']}_{entry['timestamp']}"
    return hashlib.sha256(raw.encode()).hexdigest()
def validate_gstin(gstin):
    return bool(re.match(r"\d{2}[A-Z]{5}\d{4}[A-Z]{1}[A-Z\d]{1}[Z]{1}[A-Z\d]{1}", gstin))
geolocator = Nominatim(user_agent="bioloop")

# --- REUSE DB, MICRO UNITS, CARBON FACTORS ---
reuse_db = {
    "cotton scraps": ["ЁЯз╕ Toy Stuffing", "ЁЯз╡ Yarn Recyclers"],
    "metal scraps": ["тЪЩ Metal Artist", "ЁЯкС Furniture Maker"],
    "food waste": ["ЁЯМ▒ Composting", "ЁЯФе Biogas"],
    "sawdust": ["ЁЯк╡ Board Makers", "ЁЯФе Briquette Units"],
    "paper waste": ["ЁЯУЪ Stationery", "ЁЯУж Packaging"]
}
micro_units = {
    "cotton scraps": {"unit": "Stuffing Unit", "tool": "Shredder (тВ╣8,000)", "roi": "2 months"},
    "metal scraps": {"unit": "Art Studio", "tool": "Welder (тВ╣12,000)", "roi": "тВ╣6,000/month"},
    "food waste": {"unit": "Compost Bin", "tool": "Bin (тВ╣2,000)", "roi": "тВ╣1,500/month"},
    "sawdust": {"unit": "Briquette Unit", "tool": "Press (тВ╣15,000)", "roi": "тВ╣3,000/month"},
    "paper waste": {"unit": "Paper Unit", "tool": "Pulper (тВ╣10,000)", "roi": "тВ╣2,500/month"}
}
carbon_factors = {
    "cotton scraps": 2.5, "metal scraps": 6.0, "food waste": 1.8,
    "sawdust": 2.2, "paper waste": 2.9
}
# --- REFERRAL ---
def create_referral(user_id):
    code = uuid.uuid4().hex[:8]
    refs = load_datafile(REFERRALS_FILE, [])
    refs.append({"user": user_id, "code": code, "joined": []})
    save_datafile(REFERRALS_FILE, refs)
    return code

def register_referral(code, new_user):
    refs = load_datafile(REFERRALS_FILE, [])
    for r in refs:
        if r["code"] == code:
            if new_user not in r["joined"]:
                r["joined"].append(new_user)
                save_datafile(REFERRALS_FILE, refs)
                return True
    return False

# --- UP-CYCLING GUIDES ---
def load_guides(): return load_datafile(GUIDES_FILE, [])
def save_guide(guide): 
    guides = load_guides()
    guides.append(guide)
    save_datafile(GUIDES_FILE, guides)
import streamlit as st
from bioloop_core import *
from datetime import datetime

def load_lottiefile(filepath: str):
    import json
    with open(filepath, "r") as f:
        return json.load(f)

st.set_page_config(page_title="BioLoop", page_icon="тЩ╗", layout="centered")
for k, v in [
    ("authenticated", False), ("user_id", ""), ("page", "landing"),
    ("lang", "English"), ("verified", False), ("prev_page", "landing"),
    ("notifications", [])
]: st.session_state.setdefault(k, v)

def lang_selector():
    lang = st.selectbox("ЁЯМН", list(labels.keys()), index=list(labels.keys()).index(st.session_state["lang"]))
    st.session_state["lang"] = lang

def go(page):
    st.session_state["prev_page"] = st.session_state.get("page", "landing")
    st.session_state["page"] = page

def back_button(default="landing"):
    prev = st.session_state.get("prev_page", default)
    if st.button("тмЕ " + L("back")):
        st.session_state["page"] = prev

def landing_page():
    st.image("assets/bioloop_logo.png", width=150)
    try:
        from streamlit_lottie import st_lottie
        animation = load_lottiefile("assets/hero_animation.json")
        st_lottie(animation, speed=1, width=500, height=300, loop=True)
    except Exception:
        st.info("Animation failed to load. Please install streamlit-lottie and check your assets.")
    st.markdown(f"<div class='biol-title' style='text-align:center;'>тЩ╗ BioLoop</div>", unsafe_allow_html=True)
    st.markdown(f"<div class='biol-sub' style='text-align:center;'>Empowering Circular Economy for MSMEs</div>", unsafe_allow_html=True)
    lang_selector()
    st.markdown("*How BioLoop Works:* 1) Sign up, 2) Submit waste, 3) Connect, 4) Recycle, 5) Earn badges/certificates!")
    st.button(L("login"), use_container_width=True, on_click=go, args=("login",))
    st.button(L("signup"), use_container_width=True, on_click=go, args=("signup",))
    st.button(L("faq_title"), use_container_width=True, on_click=go, args=("faq",))
    st.button(L("add_story_video"), use_container_width=True, on_click=go, args=("addvideo",))
    st.button(L("video_section"), use_container_width=True, on_click=go, args=("videos",))
    st.button(L("howto"), use_container_width=True, on_click=go, args=("howto",))
    st.button(L("privacy"), use_container_width=True, on_click=go, args=("privacy"),)
    st.button(L("whatsapp"), use_container_width=True, on_click=go, args=("chat",))

def login_page():
    st.markdown(f"<div class='biol-title'>{L('login')}</div>", unsafe_allow_html=True)
    lang_selector()
    users = load_users()
    user = st.text_input("MSME ID")
    pw = st.text_input(L("password"), type="password")
    if st.button(L("login")):
        if user in users and users[user]["pw"] == pw and users[user].get("approved", False):
            st.session_state["authenticated"] = True
            st.session_state["user_id"] = user
            st.session_state["verified"] = users[user].get("verified", False)
            st.session_state["early"] = users[user].get("early", False)
            st.session_state["privacy"] = users[user].get("privacy", True)
            st.session_state["page"] = "home"
        elif user in users and not users[user].get("approved", False):
            st.warning(L("admin_review"))
        else:
            st.error(L("invalid_login"))
    back_button("landing")

def signup_page():
    st.markdown(f"<div class='biol-title'>{L('signup')}</div>", unsafe_allow_html=True)
    lang_selector()
    users = load_users()
    new_id = st.text_input("Choose MSME ID")
    new_pw = st.text_input("Choose Password", type="password")
    gstin = st.text_input(L("gstin"))
    ref_code = st.text_input("Referral Code (optional)")
    if st.button(L("submit_signup")):
        if new_id in users:
            st.error(L("duplicate_id"))
        elif not new_id or not new_pw or not gstin:
            st.warning(L("missing_fields"))
        elif not validate_gstin(gstin):
            st.warning(L("invalid_contact"))
        else:
            users[new_id] = {
                "pw": new_pw,
                "gstin": gstin,
                "verified": False,
                "approved": False,
                "early": datetime.now().isoformat() < "2025-12-31T00:00:00",
                "privacy": True
            }
            save_users(users)
            if ref_code:
                register_referral(ref_code, new_id)
            st.success(L("account_created") + " " + L("admin_review"))
            st.button(L("login"), on_click=go, args=("login",))
    back_button("landing")

def logout():
    st.session_state["authenticated"] = False
    st.session_state["user_id"] = ""
    st.session_state["page"] = "landing"

def verify_user():
    if not st.session_state.get("verified"):
        otp = st.text_input(L("otp"))
        if st.button(L("verify")):
            if otp == "1234":
                st.session_state["verified"] = True
                users = load_users()
                users[st.session_state["user_id"]]["verified"] = True
                save_users(users)
                st.success(L("verified"))
            else:
                st.error("Incorrect OTP.")

def privacy_settings():
    st.header(L("privacy"))
    users = load_users()
    user_id = st.session_state["user_id"]
    privacy = users[user_id].get("privacy", True)
    show_contact = st.checkbox(L("show_contact"), value=privacy)
    if st.button("Save Privacy Settings"):
        users[user_id]["privacy"] = show_contact
        save_users(users)
        st.session_state["privacy"] = show_contact
        st.success("Privacy Updated!")
    back_button("dashboard")

def howto_page():
    st.header(L("howto"))
    st.info(L("howto_desc"))
    st.video("https://www.youtube.com/embed/tsuB5Gv3yEk")
    st.markdown("[Join WhatsApp Community](https://chat.whatsapp.com/XXXXX)")
    st.markdown("Early Adopter? You may get a special badge on your profile!")
    back_button("landing")

def privacy_policy_page():
    st.header(L("privacy"))
    st.write(L("privacy_summary"))
    st.write("For more info, contact admin@bioloop.in")
    back_button("landing")
import streamlit as st
from bioloop_core import *
from bioloop_pages import *
from datetime import datetime
import base64, io, pandas as pd
from fpdf import FPDF
import qrcode

def submit_page():
    st.markdown(f"<div class='biol-title'>{L('header')}</div>", unsafe_allow_html=True)
    st.info("Tip: Upload a clear photo & accurate contact for faster matches. Your privacy settings apply.")
    material_input = st.text_input(L("material"))
    material = None
    if material_input:
        match = process.extractOne(material_input.lower(), reuse_db.keys())
        if match:
            material = match[0]
            st.info(f"{L('matched')}: {material.title()} ({match[1]}%)")
    uploaded_img = st.file_uploader(L("upload_image"), type=["png", "jpg", "jpeg"])
    img_b64 = ""
    if uploaded_img:
        img_bytes = uploaded_img.read()
        img_b64 = base64.b64encode(img_bytes).decode()
    if material:
        quantity = st.number_input(L("quantity"), min_value=1)
        location = st.text_input(L("location"))
        contact = st.text_input(L("contact"))
        quality = st.selectbox(L("quality"), [L("clean"), L("mixed"), L("contaminated")])
        users = load_users()
        show_contact = st.checkbox(L("show_contact"), value=users.get(st.session_state["user_id"], {}).get("privacy", True))
        if st.button(L("submit")):
            valid = re.match(r"[^@]+@[^@]+\.[^@]+", contact) or re.match(r"\d{10}", contact)
            if not valid:
                st.warning(L("invalid_contact"))
            else:
                lat, lon = None, None
                try:
                    loc = geolocator.geocode(location)
                    if loc:
                        lat, lon = loc.latitude, loc.longitude
                except:
                    pass
                entry = {
                    "material": material,
                    "quantity": quantity,
                    "location": location,
                    "contact": contact if show_contact else "Hidden",
                    "lat": lat, "lon": lon,
                    "quality": quality,
                    "image": img_b64,
                    "timestamp": datetime.now().isoformat(),
                    "user_id": st.session_state["user_id"],
                    "show_contact": show_contact
                }
                entry["trace_id"] = generate_trace_hash(entry)
                data = load_data()
                data.append(entry)
                save_data(data)
                st.success(L("success"))
                st.session_state["page"] = "home"
    back_button("home")

def browse_page():
    st.header(L("browse_waste"))
    st.info("Tip: You can join a batch pickup or report spam listings here.")
    data = load_data()
    df = pd.DataFrame(data)
    mat = st.selectbox(L("filter_material"), [L("all")] + list(reuse_db.keys()))
    loc = st.text_input(L("filter_location"))
    filtered = df
    if mat and mat != L("all"):
        filtered = filtered[filtered["material"] == mat]
    if loc:
        filtered = filtered[filtered["location"].str.contains(loc, case=False, na=False)]
    if filtered.empty:
        st.info(L("no_data"))
    else:
        for i, row in filtered.iterrows():
            st.markdown(f"### {row.get('material', '').title()} тАФ {row.get('quantity', 0)} {L('kg_week')}")
            if row.get("image"):
                st.image(base64.b64decode(row["image"]), width=200)
            st.write(f"{L('location')}:** {row.get('location', '')}")
            st.write(f"{L('quality')}:** {row.get('quality', '')}")
            st.write(f"{L('contact')}:** {row.get('contact', '') if row.get('show_contact', True) else 'Hidden'}")
            st.write(f"{L('rating')}:** {get_user_rating(row.get('user_id', ''))} тнР")
            st.write(f"ID: {row.get('trace_id', '')[:8]}")
            st.write(f"{L('rate')}:")
            user_rating = st.slider(L("rating"), 1, 5, 3, key=f"rate-{i}")
            if st.button(L("submit_rating"), key=f"submitrate-{i}"):
                ratings = load_datafile(RATINGS_FILE, [])
                ratings.append({"user": row.get("user_id", ""), "rating": user_rating, "by": st.session_state["user_id"], "time": datetime.now().isoformat()})
                save_datafile(RATINGS_FILE, ratings)
                st.success(L("thanks_rating"))
            if st.button(L("batch_pickup"), key=f"batch-{i}"):
                join_batch_pickup(row.get('material', ''), row.get('location', ''), st.session_state['user_id'])
            if st.button(L("report_listing"), key=f"rep-{i}"):
                report_listing(row.get('trace_id', ''))
            st.markdown("---")
    back_button("home")

def join_batch_pickup(material, location, user_id):
    batches = load_datafile(BATCHES_FILE, [])
    for b in batches:
        if b["material"] == material and b["location"] == location:
            if user_id in b["users"]:
                st.info(L("already_joined"))
                return
            else:
                b["users"].append(user_id)
                save_datafile(BATCHES_FILE, batches)
                st.success(L("joined_batch"))
                add_notification(user_id, f"Batch pickup joined for {material} at {location}")
                return
    batches.append({"material": material, "location": location, "users": [user_id], "created": datetime.now().isoformat()})
    save_datafile(BATCHES_FILE, batches)
    st.success(L("joined_batch"))
    add_notification(user_id, f"Batch pickup created for {material} at {location}")

def report_listing(trace_id):
    reports = load_datafile(REPORTS_FILE, [])
    if any(r.get("trace_id") == trace_id and r.get("reporter") == st.session_state["user_id"] for r in reports):
        st.info(L("already_reported"))
        return
    reason = st.text_area("Describe the issue (spam, fake info, etc.)", key=f"repmsg-{trace_id}")
    if st.button("Submit Report", key=f"repsub-{trace_id}"):
        reports.append({
            "trace_id": trace_id,
            "reporter": st.session_state["user_id"],
            "reason": reason,
            "time": datetime.now().isoformat()
        })
        save_datafile(REPORTS_FILE, reports)
        st.success(L("reported"))
        add_notification("admin@bioloop.in", f"Listing {trace_id} reported by {st.session_state['user_id']}")

def dashboard_page():
    data = load_data()
    mydata = [d for d in data if d.get("user_id") == st.session_state.get("user_id")]
    total = sum(d.get("quantity", 0) for d in mydata)
    st.progress(min(total/100,1.0), text=f"{L('progress')}: {total} kg тАФ {L('next_badge')}: 20/50/100 kg")
    badge = None
    if total >= 100: badge = L("badge_gold")
    elif total >= 50: badge = L("badge_silver")
    elif total >= 20: badge = L("badge_bronze")
    if badge:
        st.success(badge)
    if st.session_state.get("early", False):
        st.info(L("early_adopter"))
    st.info("Refer friends for bonus badges! Your referral code: " + create_referral(st.session_state["user_id"]))
    if not mydata:
        st.info(L("no_entries"))
    else:
        for i, row in enumerate(mydata[::-1]):
            st.markdown(f"### {row.get('material', '').title()} тАФ {row.get('quantity', 0)} {L('kg_week')}")
            st.write(f"{L('location')}:** {row.get('location', '')}")
            if row.get("image"):
                st.image(base64.b64decode(row["image"]), width=200)
            st.write(f"{L('quality')}:** {row.get('quality', '')}")
            st.write(f"ID: {row.get('trace_id','')[:8]}")
            if st.button("тЭМ " + L("delete_success"), key=f"del-{i}"):
                data.remove(row)
                save_data(data)
                st.success(L("delete_success"))
    st.button("Privacy Settings", on_click=go, args=("privacy_settings",), use_container_width=True)
    back_button("home")

def analytics_page():
    data = load_data()
    df = pd.DataFrame(data)
    if not df.empty and "lat" in df and "lon" in df:
        st.map(df[["lat", "lon"]].dropna())
        st.bar_chart(df.groupby("material")["quantity"].sum())
        st.info("Impact: Top materials by quantity recycled!")
        leader = df.groupby("user_id")["quantity"].sum().sort_values(ascending=False).head(5)
        st.write(L("leaderboard"))
        for idx, (user, amt) in enumerate(leader.items(), 1):
            badge = ""
            if idx == 1: badge = L("badge_gold")
            elif idx == 2: badge = L("badge_silver")
            elif idx == 3: badge = L("badge_bronze")
            st.write(f"{idx}. {user} тАФ {amt} kg/week {badge}")
        user_amt = leader.get(st.session_state["user_id"], 0)
        if user_amt >= 100:
            st.success(L("badge_gold"))
        elif user_amt >= 50:
            st.info(L("badge_silver"))
        elif user_amt >= 20:
            st.info(L("badge_bronze"))
    else:
        st.info(L("no_data"))
    back_button("home")

def microplanner_page():
    st.header(L("microplanner"))
    mat = st.selectbox(L("material"), list(micro_units.keys()))
    unit = micro_units[mat]
    st.write(f"Unit: {unit['unit']}")
    st.write(f"Tool/Cost: {unit['tool']}")
    st.write(f"ROI: {unit['roi']}")
    st.write(f"Sample Reusers: {', '.join(reuse_db[mat])}")
    st.info("Check up-cycling guides below for more ideas!")
    guides = load_guides()
    for guide in guides:
        if guide["material"] == mat:
            st.markdown(f"*Guide:* {guide['title']} - {guide['content']}")
    guide_title = st.text_input("Suggest your up-cycling guide for this material:")
    guide_content = st.text_area("Guide Content")
    if st.button("Submit Guide"):
        save_guide({"material": mat, "title": guide_title, "content": guide_content, "by": st.session_state["user_id"]})
        st.success("Guide submitted!")

def generate_certificate(user_id, total_waste):
    if total_waste >= 50:
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=16)
        pdf.cell(200, 10, txt="BioLoop Green MSME Certificate", ln=True, align='C')
        pdf.cell(200, 10, txt=f"Awarded to {user_id}", ln=True, align='C')
        pdf.cell(200, 10, txt=f"For recycling {total_waste} kg waste", ln=True, align='C')
        qr = qrcode.make(f"https://bioloop.org/cert/{user_id}")
        qr_buf = io.BytesIO()
        qr.save(qr_buf, format='PNG')
        pdf.image(qr_buf, x=80, y=60, w=50, h=50)
        buf = io.BytesIO()
        pdf.output(buf)
        st.download_button(L("download_cert"), buf.getvalue(), "certificate.pdf", "application/pdf")

def certificate_page():
    st.header(L("download_cert"))
    data = load_data()
    df = pd.DataFrame(data)
    total = df[df["user_id"] == st.session_state["user_id"]]["quantity"].sum() if not df.empty else 0
    generate_certificate(st.session_state["user_id"], total)
    back_button("home")

def referral_page():
    st.header("Referral Program")
    code = create_referral(st.session_state["user_id"])
    st.markdown(f"Share your referral code: {code}. Friends who sign up with this get bonus badges!")
    refs = load_datafile(REFERRALS_FILE, [])
    for r in refs:
        if r["user"] == st.session_state["user_id"]:
            st.write(f"Friends joined: {', '.join(r['joined'])}")

def interest_registration():
    st.subheader(L("register_interest"))
    mat = st.selectbox(L("interest_material"), list(reuse_db.keys()))
    loc = st.text_input(L("interest_location"))
    if st.button(L("register_interest")):
        interests = load_datafile(INTERESTS_FILE, [])
        interests.append({
            "user": st.session_state["user_id"],
            "material": mat,
            "location": loc,
            "time": datetime.now().isoformat()
        })
        save_datafile(INTERESTS_FILE, interests)
        st.success(L("interest_registered"))
        add_notification(st.session_state["user_id"], f"Interest registered for {mat} at {loc}")
    back_button("home")

def notifications_page():
    st.header(L("notifications"))
    notifs = load_datafile(NOTIFICATIONS_FILE, [])
    user_notifs = [n for n in notifs if n.get("user") == st.session_state["user_id"]]
    if not user_notifs:
        st.info(L("no_notifications"))
    else:
        for n in user_notifs[::-1]:
            st.success(n.get("msg", ""))
    back_button("home")

def export_page():
    st.header(L("export"))
    data = load_data()
    df = pd.DataFrame(data)
    if not df.empty:
        buf = io.StringIO()
        df.to_csv(buf, index=False)
        st.download_button(L("download_csv"), buf.getvalue(), "waste_data.csv", "text/csv")
    else:
        st.info(L("no_data"))
    back_button("home")

def video_stories():
    st.header(L("add_story_video"))
    stories = load_datafile(STORIES_FILE, [])
    title = st.text_input(L("story_title"))
    desc = st.text_area(L("story_desc"))
    youtube = st.text_input(L("video_url"), placeholder="https://www.youtube.com/embed/...")
    if st.button(L("submit_video")):
        if youtube:
            stories.append({
                "user": st.session_state["user_id"],
                "title": title,
                "desc": desc,
                "youtube": youtube,
                "time": datetime.now().isoformat()
            })
            save_datafile(STORIES_FILE, stories)
            st.success(L("video_submitted"))
    back_button("home")

def show_video_stories():
    st.header(L("video_section"))
    stories = load_datafile(STORIES_FILE, [])
    if not stories:
        st.info(L("no_video_stories"))
    for s in stories[::-1]:
        st.markdown(f"### {s.get('title', '(No Title)')}")
        st.write(f"by {s.get('user', '')} at {s.get('time', '')[:16].replace('T',' ')}")
        if s.get("youtube"):
            st.video(s["youtube"])
        if s.get("desc"):
            st.write(s["desc"])
        st.markdown("---")
    back_button("home")

def main():
    pages = {
        "landing": landing_page,
        "login": login_page,
        "signup": signup_page,
        "home": landing_page,
        "faq": None, # Implement FAQ bot if needed
        "howto": howto_page,
        "privacy": privacy_policy_page,
        "privacy_settings": privacy_settings,
        "chat": None, # Implement Community Chat if needed
        "submit": submit_page,
        "browse": browse_page,
        "dashboard": dashboard_page,
        "export": export_page,
        "analytics": analytics_page,
        "microplanner": microplanner_page,
        "certificate": certificate_page,
        "interest": interest_registration,
        "notifications": notifications_page,
        "addvideo": video_stories,
        "videos": show_video_stories,
        "referral": referral_page
    }
    page = st.session_state.get("page", "landing")
    if page in pages and pages[page]:
        pages[page]()
    else:
        landing_page()

if _name_ == "_main_":
    main()
