import streamlit as st
import json, os, re, hashlib, base64, io
from fuzzywuzzy import process
from datetime import datetime
from geopy.geocoders import Nominatim
import pandas as pd
from fpdf import FPDF
import streamlit as st
import pandas as pd
import io
from datetime import datetime
from fpdf import FPDF

# --- SESSION STATE & SETUP ---
st.set_page_config(page_title="BioLoop", page_icon="тЩ╗", layout="centered")
for k, v in [
    ("authenticated", False), ("user_id", ""), ("page", "landing"),
    ("lang", "English"), ("verified", False), ("prev_page", "landing")
]: st.session_state.setdefault(k, v)

# --- FILES & DIRS ---
DATA_FILE = "data/waste_profiles.json"
USER_FILE = "data/users.json"
INTERESTS_FILE = "data/interests.json"
MESSAGES_DIR = "data/messages/"
STORIES_FILE = "data/success_stories.json"
RATINGS_FILE = "data/ratings.json"
os.makedirs("data", exist_ok=True)
os.makedirs(MESSAGES_DIR, exist_ok=True)
for f in [DATA_FILE, USER_FILE, INTERESTS_FILE, STORIES_FILE, RATINGS_FILE]:
    if not os.path.exists(f):
        with open(f, "w") as file:
            json.dump([] if f.endswith(".json") else {}, file)

# --- LABELS (English, Tamil, Hindi) ---
labels = {
    "English": {
        "submit": "Submit Waste", "material": "Material Type", "login": "MSME Login", "password": "Password",
        "signup": "Sign Up", "location": "Location", "quantity": "Quantity (kg/week)", "invalid_login": "ЁЯФР Invalid login.",
        "header": "Submit Your Waste", "contact": "Contact Info", "quality": "Quality", "public_contact": "Show contact publicly",
        "account_created": "тЬЕ Account created! Please log in.", "duplicate_id": "ЁЯЪл ID already exists.",
        "missing_fields": "Please fill both fields.", "logout": "Logout", "back": "Back", "success": "Submission saved.",
        "upload_image": "Upload a picture of the waste", "matched": "Matched",
        "go_home": "Go Home", "invalid_contact": "Invalid contact.",
        "filter_material": "Filter by Material", "filter_location": "Filter by Location",
        "browse_waste": "Browse Waste Listings", "all": "All", "kg_week": "kg/week",
        "clean": "Clean", "mixed": "Mixed", "contaminated": "Contaminated",
        "my_submissions": "My Submissions", "analytics": "Analytics", "microplanner": "Micro-unit Planner", "export": "Export Data",
        "admin_panel": "Admin Panel", "top_materials": "Top Submitted Materials",
        "no_data": "No data found yet.", "no_entries": "You haven't submitted any waste yet.",
        "delete_success": "тЬЕ Submission deleted successfully.", "download_csv": "Download CSV",
        "browse": "Browse Materials", "otp": "Enter OTP sent to your email (1234)",
        "verify": "Verify", "verified": "Verified MSME ЁЯЯв", "not_verified": "Not Verified ЁЯФ┤",
        "rate": "Rate this user", "rating": "Rating", "submit_rating": "Submit Rating", "thanks_rating": "Thanks for rating!",
        "success_story": "ЁЯМЯ Success Stories", "share_story": "Share Your Story", "submit_story": "Submit Story",
        "story_submitted": "Story submitted!", "impact_dash": "ЁЯМП Impact Dashboard",
        "register_interest": "ЁЯФФ Register Interest", "interest_material": "Material", "interest_location": "Preferred Location",
        "interest_registered": "Interest registered! You'll see matches on your dashboard.",
        "your_interests": "Your Registered Interests", "msg": "ЁЯТм Messages", "send": "Send",
        "howto": "ЁЯОУ How-to Videos & Support", "ai_help": "ЁЯдЦ Need help? Ask our FAQ bot below:",
        "download_cert": "ЁЯОУ Download Green MSME Certificate",
        "profile": "Profile", "leaderboard": "ЁЯПЖ Top Contributors", "badge_gold": "ЁЯеЗ Gold Contributor",
        "badge_silver": "ЁЯеИ Silver Contributor", "badge_bronze": "ЁЯеЙ Bronze Contributor",
        "add_story_video": "Add Your Story/Video", "video_url": "Paste YouTube Link of Your Story/Innovation",
        "story_title": "Story Title", "story_desc": "Write your story/impact here", "submit_video": "Submit Video Story",
        "video_submitted": "Video/Story submitted!", "faq_title": "тЭУ MSME FAQ Bot", "ask_question": "Ask your question",
        "ask": "Ask", "video_section": "ЁЯОм Community Videos & Stories", "no_video_stories": "No video stories yet."
    },
    "родрооро┐ро┤рпН": {
        "submit": "роЪрооро░рпНрокрпНрокро┐", "material": "ро╡ро╕рпНродрпБ ро╡роХрпИ", "login": "роОроорпН.роОро╕рпН.роОроорпН.роЗ роирпБро┤рпИро╡рпБ", "password": "роХроЯро╡рпБроЪрпНроЪрпКро▓рпН",
        "signup": "рокродро┐ро╡рпБ роЪрпЖропрпН", "location": "роЗроЯроорпН", "quantity": "роЕро│ро╡рпБ (роХро┐.роХро┐/ро╡ро╛ро░роорпН)", "invalid_login": "ЁЯФР родро╡ро▒ро╛рой роирпБро┤рпИро╡рпБ.",
        "header": "роЙроЩрпНроХро│рпН роХро┤ро┐ро╡рпБроХро│рпИ роЪрооро░рпНрокрпНрокро┐роХрпНроХро╡рпБроорпН", "contact": "родрпКроЯро░рпНрокрпБ родроХро╡ро▓рпН", "quality": "родро░роорпН", "public_contact": "родрпКроЯро░рпНрокрпИ рокрпКродрпБро╡ро╛роХ роХро╛роЯрпНроЯро╡рпБроорпН",
        "account_created": "тЬЕ роХрогроХрпНроХрпБ роЙро░рпБро╡ро╛роХрпНроХрокрпНрокроЯрпНроЯродрпБ! родропро╡рпБроЪрпЖропрпНродрпБ роирпБро┤рпИроХ.", "duplicate_id": "ЁЯЪл роРроЯро┐ роПро▒рпНроХройро╡рпЗ роЙро│рпНро│родрпБ.",
        "missing_fields": "роЙро░рпБрокрпНрокроЯро┐роХро│рпИ роиро┐ро░рокрпНрокро╡рпБроорпН.", "logout": "ро╡рпЖро│ро┐ропрпЗро▒рпБ", "back": "рокро┐ройрпНройро╛ро▓рпН", "success": "роЪрооро░рпНрокрпНрокро┐рокрпНрокрпБ роЪрпЗрооро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ.",
        "upload_image": "роХро┤ро┐ро╡ро┐ройрпН рокроЯродрпНродрпИ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН", "matched": "рокрпКро░рпБроирпНродро┐ропродрпБ",
        "go_home": "роорпБроХрокрпНрокрпБроХрпНроХрпБ роЪрпЖро▓рпН", "invalid_contact": "родро╡ро▒ро╛рой родрпКроЯро░рпНрокрпБ.",
        "filter_material": "ро╡ро╕рпНродрпБ роорпВро▓роорпН ро╡роЯро┐роХроЯрпНроЯро╡рпБроорпН", "filter_location": "роЗроЯроорпН роорпВро▓роорпН ро╡роЯро┐роХроЯрпНроЯро╡рпБроорпН",
        "browse_waste": "роХро┤ро┐ро╡рпБроХро│рпИ родрпЗроЯрпБроЩрпНроХро│рпН", "all": "роЕройрпИродрпНродрпБроорпН", "kg_week": "роХро┐.роХро┐/ро╡ро╛ро░роорпН",
        "clean": "родрпВропрпНроорпИ", "mixed": "роХро▓рокрпНрокрпБ", "contaminated": "рооро╛роЪрпБрокроЯрпНроЯродрпБ",
        "my_submissions": "роОройрпН роЪрооро░рпНрокрпНрокро┐рокрпНрокрпБроХро│рпН", "analytics": "рокрпБро│рпНро│ро┐ро╡ро┐ро╡ро░роЩрпНроХро│рпН", "microplanner": "роорпИроХрпНро░рпЛ-ропрпВройро┐роЯрпН родро┐роЯрпНроЯроорпН", "export": "родро░ро╡рпБ роПро▒рпНро▒рпБроородро┐",
        "admin_panel": "роиро┐ро░рпНро╡ро╛роХрокрпН рокро▓роХроорпН", "top_materials": "роЙроЪрпНроЪ роЪрооро░рпНрокрпНрокро┐роХрпНроХрокрпНрокроЯрпНроЯ рокрпКро░рпБроЯрпНроХро│рпН",
        "no_data": "родро░ро╡рпБ роЗро▓рпНро▓рпИ.", "no_entries": "роирпАроЩрпНроХро│рпН роОроирпНрод роХро┤ро┐ро╡рпИропрпБроорпН роЪрооро░рпНрокрпНрокро┐роХрпНроХро╡ро┐ро▓рпНро▓рпИ.",
        "delete_success": "тЬЕ роЪрооро░рпНрокрпНрокро┐рокрпНрокрпБ роирпАроХрпНроХрокрпНрокроЯрпНроЯродрпБ.", "download_csv": "CSV рокродро┐ро╡ро┐ро▒роХрпНроХрпБ",
        "browse": "ро╡ро╕рпНродрпБроХрпНроХро│рпИ родрпЗроЯрпБроЩрпНроХро│рпН", "otp": "роЙроЩрпНроХро│рпН рооро┐ройрпНройроЮрпНроЪро▓ро┐ро▓рпН ро╡роирпНрод OTP роР роЙро│рпНро│ро┐роЯро╡рпБроорпН (1234)",
        "verify": "роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН", "verified": "роЪро░ро┐рокро╛ро░рпНроХрпНроХрокрпНрокроЯрпНроЯ MSME ЁЯЯв", "not_verified": "роЪро░ро┐рокро╛ро░рпНроХрпНроХрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИ ЁЯФ┤",
        "rate": "роЗроирпНрод рокропройро╛ро│ро░рпИ роородро┐рокрпНрокро┐роЯрпБ", "rating": "роородро┐рокрпНрокрпАроЯрпБ", "submit_rating": "роородро┐рокрпНрокрпАроЯрпНроЯрпИ роЪрооро░рпНрокрпНрокро┐", "thanks_rating": "роородро┐рокрпНрокрпАроЯрпНроЯрпБроХрпНроХрпБ роиройрпНро▒ро┐!",
        "success_story": "ЁЯМЯ ро╡рпЖро▒рпНро▒ро┐роХрпН роХродрпИроХро│рпН", "share_story": "роЙроЩрпНроХро│рпН роХродрпИропрпИ рокроХро┐ро░рпБроЩрпНроХро│рпН", "submit_story": "роХродрпИ роЪрооро░рпНрокрпНрокро┐",
        "story_submitted": "роХродрпИ роЪрооро░рпНрокрпНрокро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ!", "impact_dash": "ЁЯМП родро╛роХрпНроХроорпН роЯро╛ро╖рпНрокрпЛро░рпНроЯрпБ",
        "register_interest": "ЁЯФФ роЖро░рпНро╡родрпНродрпИ рокродро┐ро╡рпБ роЪрпЖропрпН", "interest_material": "ро╡ро╕рпНродрпБ", "interest_location": "ро╡ро┐ро░рпБрокрпНрок роЗроЯроорпН",
        "interest_registered": "роЖро░рпНро╡роорпН рокродро┐ро╡рпБ роЪрпЖропрпНропрокрпНрокроЯрпНроЯродрпБ! роирпАроЩрпНроХро│рпН роЯро╛ро╖рпНрокрпЛро░рпНроЯро┐ро▓рпН рокрпКро░рпБродрпНродроЩрпНроХро│рпИ рокро╛ро░рпНроХрпНроХро▓ро╛роорпН.",
        "your_interests": "роЙроЩрпНроХро│рпН рокродро┐ро╡рпБроЪрпЖропрпНропрокрпНрокроЯрпНроЯ роЖро░рпНро╡роЩрпНроХро│рпН", "msg": "ЁЯТм роЪрпЖропрпНродро┐роХро│рпН", "send": "роЕройрпБрокрпНрокрпБ",
        "howto": "ЁЯОУ ро╡рпАроЯро┐ропрпЛ рооро▒рпНро▒рпБроорпН роЙродро╡ро┐", "ai_help": "ЁЯдЦ роЙродро╡ро┐ ро╡рпЗрогрпНроЯрпБрооро╛? роХрпАро┤рпЗ FAQ рокро╛роЯрпНроЯро┐ро▓рпН роХрпЗро│рпБроЩрпНроХро│рпН:",
        "download_cert": "ЁЯОУ рокроЪрпБроорпИ MSME роЪро╛ройрпНро▒ро┐родро┤рпН рокродро┐ро╡ро┐ро▒роХрпНроХрпБ",
        "profile": "роЪрпБропро╡ро┐ро╡ро░роорпН", "leaderboard": "ЁЯПЖ роЪро┐ро▒роирпНрод рокроЩрпНроХро│ро┐рокрпНрокро╛ро│ро░рпНроХро│рпН", "badge_gold": "ЁЯеЗ родроЩрпНроХроорпН рокроЩрпНроХро│ро┐рокрпНрокро╛ро│ро░рпН",
        "badge_silver": "ЁЯеИ ро╡рпЖро│рпНро│ро┐ рокроЩрпНроХро│ро┐рокрпНрокро╛ро│ро░рпН", "badge_bronze": "ЁЯеЙ ро╡рпЖрогрпНроХро▓роорпН рокроЩрпНроХро│ро┐рокрпНрокро╛ро│ро░рпН",
        "add_story_video": "роЙроЩрпНроХро│рпН роХродрпИропрпИропрпБроорпН/ро╡рпАроЯро┐ропрпЛроХрпИропрпБроорпН роЪрпЗро░рпНроХрпНроХро╡рпБроорпН", "video_url": "роЙроЩрпНроХро│рпН YouTube ро╡рпАроЯро┐ропрпЛ ро▓ро┐роЩрпНроХрпН",
        "story_title": "роХродрпИропро┐ройрпН родро▓рпИрокрпНрокрпБ", "story_desc": "роЙроЩрпНроХро│рпН роХродрпИ/ро╡ро┐ро│рпИро╡рпБроХро│рпИ роОро┤рпБродро╡рпБроорпН", "submit_video": "ро╡рпАроЯро┐ропрпЛ/роХродрпИ роЪрооро░рпНрокрпНрокро┐",
        "video_submitted": "ро╡рпАроЯро┐ропрпЛ/роХродрпИ роЪрооро░рпНрокрпНрокро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ!", "faq_title": "тЭУ MSME роХрпЗро│рпНро╡ро┐ рокро╛роЯрпНроЯрпБ", "ask_question": "роЙроЩрпНроХро│рпН роХрпЗро│рпНро╡ро┐ропрпИ роОро┤рпБродро╡рпБроорпН",
        "ask": "роХрпЗро│рпН", "video_section": "ЁЯОм роЪроорпВроХро╡рпАроЯро┐ропрпЛроХрпНроХро│рпН рооро▒рпНро▒рпБроорпН роХродрпИроХро│рпН", "no_video_stories": "роЗрокрпНрокрпЛродрпБ ро╡рпАроЯро┐ропрпЛ роХродрпИроХро│рпН роЗро▓рпНро▓рпИ."
    },
    "рд╣рд┐рдиреНрджреА": {
        "submit": "рдЬрдорд╛ рдХрд░реЗрдВ", "material": "рд╕рд╛рдордЧреНрд░реА рдкреНрд░рдХрд╛рд░", "login": "рдПрдордПрд╕рдПрдордИ рд▓реЙрдЧрд┐рди", "password": "рдкрд╛рд╕рд╡рд░реНрдб",
        "signup": "рд╕рд╛рдЗрди рдЕрдк", "location": "рд╕реНрдерд╛рди", "quantity": "рдорд╛рддреНрд░рд╛ (рдХрд┐рдЧреНрд░рд╛/рд╕рдкреНрддрд╛рд╣)", "invalid_login": "ЁЯФР рдЕрдорд╛рдиреНрдп рд▓реЙрдЧрд┐рдиред",
        "header": "рдЕрдкрдирд╛ рдХрдЪрд░рд╛ рдЬрдорд╛ рдХрд░реЗрдВ", "contact": "рд╕рдВрдкрд░реНрдХ рдЬрд╛рдирдХрд╛рд░реА", "quality": "рдЧреБрдгрд╡рддреНрддрд╛", "public_contact": "рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рд░реВрдк рд╕реЗ рд╕рдВрдкрд░реНрдХ рджрд┐рдЦрд╛рдПрдБ",
        "account_created": "тЬЕ рдЦрд╛рддрд╛ рдмрдирд╛рдпрд╛ рдЧрдпрд╛! рдХреГрдкрдпрд╛ рд▓реЙрдЧ рдЗрди рдХрд░реЗрдВред", "duplicate_id": "ЁЯЪл рдЖрдИрдбреА рдкрд╣рд▓реЗ рд╕реЗ рдореМрдЬреВрдж рд╣реИред",
        "missing_fields": "рдХреГрдкрдпрд╛ рд╕рднреА рдлрд╝реАрд▓реНрдб рднрд░реЗрдВред", "logout": "рд▓реЙрдЧрдЖрдЙрдЯ", "back": "рдкреАрдЫреЗ", "success": "рдЬрдорд╛ рд╕рдлрд▓ред",
        "upload_image": "рдХрдЪрд░реЗ рдХреА рддрд╕реНрд╡реАрд░ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ", "matched": "рдореЗрд▓ рдЦрд╛рдпрд╛",
        "go_home": "рдореБрдЦрдкреГрд╖реНрда рдкрд░ рдЬрд╛рдПрдВ", "invalid_contact": "рдЕрдорд╛рдиреНрдп рд╕рдВрдкрд░реНрдХред",
        "filter_material": "рд╕рд╛рдордЧреНрд░реА рджреНрд╡рд╛рд░рд╛ рдЫрд╛рдБрдЯреЗрдВ", "filter_location": "рд╕реНрдерд╛рди рджреНрд╡рд╛рд░рд╛ рдЫрд╛рдБрдЯреЗрдВ",
        "browse_waste": "рдХрдЪрд░рд╛ рдЦреЛрдЬреЗрдВ", "all": "рд╕рднреА", "kg_week": "рдХрд┐рдЧреНрд░рд╛/рд╕рдкреНрддрд╛рд╣",
        "clean": "рд╕рд╛рдлрд╝", "mixed": "рдорд┐рд╢реНрд░рд┐рдд", "contaminated": "рдкреНрд░рджреВрд╖рд┐рдд",
        "my_submissions": "рдореЗрд░реА рдкреНрд░рд╡рд┐рд╖реНрдЯрд┐рдпрд╛рдБ", "analytics": "рд╡рд┐рд╢реНрд▓реЗрд╖рдг", "microplanner": "рдорд╛рдЗрдХреНрд░реЛ-рдпреВрдирд┐рдЯ рдпреЛрдЬрдирд╛рдХрд╛рд░", "export": "рдбреЗрдЯрд╛ рдирд┐рд░реНрдпрд╛рдд",
        "admin_panel": "рдкреНрд░рд╢рд╛рд╕рди рдкреИрдирд▓", "top_materials": "рд╢реАрд░реНрд╖ рдЬрдорд╛ рдХреА рдЧрдИ рд╕рд╛рдордЧреНрд░реА",
        "no_data": "рдХреЛрдИ рдбреЗрдЯрд╛ рдирд╣реАрдВред", "no_entries": "рдЖрдкрдиреЗ рдЕрднреА рддрдХ рдХреЛрдИ рдХрдЪрд░рд╛ рдЬрдорд╛ рдирд╣реАрдВ рдХрд┐рдпрд╛ рд╣реИред",
        "delete_success": "тЬЕ рдкреНрд░рд╡рд┐рд╖реНрдЯрд┐ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╣рдЯрд╛рдИ рдЧрдИред", "download_csv": "CSV рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ",
        "browse": "рд╕рд╛рдордЧреНрд░реА рдмреНрд░рд╛рдЙрдЬрд╝ рдХрд░реЗрдВ", "otp": "рдЕрдкрдиреЗ рдИрдореЗрд▓ рдкрд░ рднреЗрдЬрд╛ рдЧрдпрд╛ OTP рджрд░реНрдЬ рдХрд░реЗрдВ (1234)",
        "verify": "рд╕рддреНрдпрд╛рдкрд┐рдд рдХрд░реЗрдВ", "verified": "рд╕рддреНрдпрд╛рдкрд┐рдд MSME ЁЯЯв", "not_verified": "рдЕрд╕рддреНрдпрд╛рдкрд┐рдд ЁЯФ┤",
        "rate": "рдЗрд╕ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рд░реЗрдЯ рдХрд░реЗрдВ", "rating": "рд░реЗрдЯрд┐рдВрдЧ", "submit_rating": "рд░реЗрдЯрд┐рдВрдЧ рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВ", "thanks_rating": "рд░реЗрдЯрд┐рдВрдЧ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж!",
        "success_story": "ЁЯМЯ рд╕рдлрд▓рддрд╛ рдХреА рдХрд╣рд╛рдирд┐рдпрд╛рдБ", "share_story": "рдЕрдкрдиреА рдХрд╣рд╛рдиреА рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ", "submit_story": "рдХрд╣рд╛рдиреА рдЬрдорд╛ рдХрд░реЗрдВ",
        "story_submitted": "рдХрд╣рд╛рдиреА рдЬрдорд╛ рд╣реЛ рдЧрдИ!", "impact_dash": "ЁЯМП рдкреНрд░рднрд╛рд╡ рдбреИрд╢рдмреЛрд░реНрдб",
        "register_interest": "ЁЯФФ рд░реБрдЪрд┐ рджрд░реНрдЬ рдХрд░реЗрдВ", "interest_material": "рд╕рд╛рдордЧреНрд░реА", "interest_location": "рдкрд╕рдВрджреАрджрд╛ рд╕реНрдерд╛рди",
        "interest_registered": "рд░реБрдЪрд┐ рджрд░реНрдЬ рд╣реЛ рдЧрдИ! рдЖрдкрдХреЛ рдбреИрд╢рдмреЛрд░реНрдб рдкрд░ рдорд┐рд▓рд╛рди рджрд┐рдЦрд╛рдИ рджреЗрдЧрд╛ред",
        "your_interests": "рдЖрдкрдХреА рдкрдВрдЬреАрдХреГрдд рд░реБрдЪрд┐рдпрд╛рдБ", "msg": "ЁЯТм рд╕рдВрджреЗрд╢", "send": "рднреЗрдЬреЗрдВ",
        "howto": "ЁЯОУ рд╡реАрдбрд┐рдпреЛ рдФрд░ рд╕рд╣рд╛рдпрддрд╛", "ai_help": "ЁЯдЦ рд╕рд╣рд╛рдпрддрд╛ рдЪрд╛рд╣рд┐рдП? рдиреАрдЪреЗ FAQ рдмреЙрдЯ рдореЗрдВ рдкреВрдЫреЗрдВ:",
        "download_cert": "ЁЯОУ рдЧреНрд░реАрди MSME рдкреНрд░рдорд╛рдгрдкрддреНрд░ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ",
        "profile": "рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓", "leaderboard": "ЁЯПЖ рд╢реАрд░реНрд╖ рдпреЛрдЧрджрд╛рдирдХрд░реНрддрд╛", "badge_gold": "ЁЯеЗ рдЧреЛрд▓реНрдб рдпреЛрдЧрджрд╛рдирдХрд░реНрддрд╛",
        "badge_silver": "ЁЯеИ рд╕рд┐рд▓реНрд╡рд░ рдпреЛрдЧрджрд╛рдирдХрд░реНрддрд╛", "badge_bronze": "ЁЯеЙ рдмреНрд░реЙрдиреНрдЬ рдпреЛрдЧрджрд╛рдирдХрд░реНрддрд╛",
        "add_story_video": "рдЕрдкрдиреА рдХрд╣рд╛рдиреА/рд╡реАрдбрд┐рдпреЛ рдЬреЛрдбрд╝реЗрдВ", "video_url": "рдЕрдкрдиреА рдХрд╣рд╛рдиреА/рдирд╡рд╛рдЪрд╛рд░ рдХрд╛ YouTube рд▓рд┐рдВрдХ рдбрд╛рд▓реЗрдВ",
        "story_title": "рдХрд╣рд╛рдиреА рдХрд╛ рд╢реАрд░реНрд╖рдХ", "story_desc": "рдпрд╣рд╛рдБ рдЕрдкрдиреА рдХрд╣рд╛рдиреА/рдкреНрд░рднрд╛рд╡ рд▓рд┐рдЦреЗрдВ", "submit_video": "рд╡реАрдбрд┐рдпреЛ/рдХрд╣рд╛рдиреА рдЬрдорд╛ рдХрд░реЗрдВ",
        "video_submitted": "рд╡реАрдбрд┐рдпреЛ/рдХрд╣рд╛рдиреА рдЬрдорд╛ рд╣реЛ рдЧрдИ!", "faq_title": "тЭУ MSME FAQ рдмреЙрдЯ", "ask_question": "рдЕрдкрдирд╛ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ",
        "ask": "рдкреВрдЫреЗрдВ", "video_section": "ЁЯОм рд╕рд╛рдореБрджрд╛рдпрд┐рдХ рд╡реАрдбрд┐рдпреЛ рдФрд░ рдХрд╣рд╛рдирд┐рдпрд╛рдБ", "no_video_stories": "рдЕрднреА рдХреЛрдИ рд╡реАрдбрд┐рдпреЛ рдХрд╣рд╛рдиреА рдирд╣реАрдВ рд╣реИред"
    }
}
def L(key): return labels[st.session_state["lang"]].get(key, key)

# --- UTILS ---
def load_users():
    with open(USER_FILE) as f:
        users = json.load(f)
        return users if isinstance(users, dict) else {}
def save_users(users):
    with open(USER_FILE, "w") as f: json.dump(users, f, indent=2)
def load_datafile(path, default=None):
    if not os.path.exists(path): return default
    with open(path) as f:
        try: return json.load(f)
        except: return default
def save_datafile(path, data):
    with open(path, "w") as f: json.dump(data, f, indent=2)
def load_data(): return load_datafile(DATA_FILE, [])
def save_data(data): save_datafile(DATA_FILE, data)

# --- NAVIGATION & LANG SELECTORS ---
def go(page):
    st.session_state["prev_page"] = st.session_state.get("page", "landing")
    st.session_state["page"] = page

def back_button(default="landing"):
    prev = st.session_state.get("prev_page", default)
    if st.button("тмЕя╕П " + L("back")):
        st.session_state["page"] = prev
        st.experimental_rerun()

def lang_selector():
    lang = st.selectbox("ЁЯМН", list(labels.keys()),
                        index=list(labels.keys()).index(st.session_state["lang"]))
    st.session_state["lang"] = lang

def verify_user():
    if not st.session_state.get("verified"):
        otp = st.text_input(L("otp"))
        if st.button(L("verify")):
            if otp == "1234":
                st.session_state["verified"] = True
                st.success(L("verified"))
            else:
                st.error("Incorrect OTP.")

def user_badge(user_id):
    if user_id == "admin@bioloop.in":
        return "ЁЯЫб Admin"
    if st.session_state.get("verified"):
        return L("verified")
    return L("not_verified")

# --- Multilingual FAQ BOT ---
def faq_bot():
    st.header(L("faq_title"))
    faqs = {
        "English": {
            "how to submit waste": "Click 'Submit Waste', fill the form and submit.",
            "how to get certificate": "Contribute over 50kg and download from dashboard.",
            "how to register interest": "Go to 'Register Interest' and fill the form.",
            "how to contact buyer": "Use the message board on the listing.",
            "how to add video": "Go to 'Add Your Story/Video' and submit your video link."
        },
        "родрооро┐ро┤рпН": {
            "роХро┤ро┐ро╡рпИ роЪрооро░рпНрокрпНрокро┐рокрпНрокродрпБ роОрокрпНрокроЯро┐": "'Submit Waste' роХро┐ро│ро┐роХрпН роЪрпЖропрпНродрпБ рокроЯро┐ро╡родрпНродрпИ роиро┐ро░рокрпНрокро┐ роЪрооро░рпНрокрпНрокро┐роХрпНроХро╡рпБроорпН.",
            "роЪро╛ройрпНро▒ро┐родро┤рпН рокрпЖро▒ роОрокрпНрокроЯро┐": "50 роХро┐ро▓рпЛро╡рпБроХрпНроХрпБ роорпЗро▓рпН рокроЩрпНроХро│ро┐рокрпНрокро┐ро▓рпН 'Dashboard' роЗро▓рпН рокродро┐ро╡ро┐ро▒роХрпНроХроорпН роЪрпЖропрпНропро╡рпБроорпН.",
            "роЖро░рпНро╡роорпН рокродро┐ро╡рпБ роЪрпЖропрпНро╡родрпБ роОрокрпНрокроЯро┐": "'Register Interest' роЪрпЖройрпНро▒рпБ рокроЯро┐ро╡родрпНродрпИ рокрпВро░рпНродрпНродро┐ роЪрпЖропрпНропро╡рпБроорпН.",
            "ро╡ро╛роЩрпНроХрпБрокро╡ро░рпИ родрпКроЯро░рпНрокрпБ роХрпКро│рпНро│рпБро╡родрпБ роОрокрпНрокроЯро┐": "рокродро┐ро╡ро┐ро▓рпН роЙро│рпНро│ 'message board' рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН.",
            "ро╡рпАроЯро┐ропрпЛ роЪрпЗро░рпНроХрпНроХ": "'Add Your Story/Video' роЪрпЖройрпНро▒рпБ роЙроЩрпНроХро│рпН YouTube ро▓ро┐роЩрпНроХрпИ роЪрооро░рпНрокрпНрокро┐роХрпНроХро╡рпБроорпН."
        },
        "рд╣рд┐рдиреНрджреА": {
            "рдХрдЪрд░рд╛ рдХреИрд╕реЗ рдЬрдорд╛ рдХрд░реЗрдВ": "'Submit Waste' рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ, рдлреЙрд░реНрдо рднрд░реЗрдВ рдФрд░ рдЬрдорд╛ рдХрд░реЗрдВред",
            "рдкреНрд░рдорд╛рдгрдкрддреНрд░ рдХреИрд╕реЗ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ": "50рдХрд┐рдЧреНрд░рд╛ рд╕реЗ рдЕрдзрд┐рдХ рдпреЛрдЧрджрд╛рди рдХрд░реЗрдВ рдФрд░ рдбреИрд╢рдмреЛрд░реНрдб рд╕реЗ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВред",
            "рд░реБрдЪрд┐ рджрд░реНрдЬ рдХреИрд╕реЗ рдХрд░реЗрдВ": "'Register Interest' рдЬрд╛рдПрдВ рдФрд░ рдлреЙрд░реНрдо рднрд░реЗрдВред",
            "рдЦрд░реАрджрд╛рд░ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХреИрд╕реЗ рдХрд░реЗрдВ": "рд▓рд┐рд╕реНрдЯрд┐рдВрдЧ рдореЗрдВ 'message board' рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред",
            "рд╡реАрдбрд┐рдпреЛ рдХреИрд╕реЗ рдЬреЛрдбрд╝реЗрдВ": "'Add Your Story/Video' рдкрд░ рдЬрд╛рдХрд░ рдЕрдкрдирд╛ YouTube рд▓рд┐рдВрдХ рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВред"
        }
    }
    q = st.text_input(L("ask_question"))
    if st.button(L("ask")):
        answer = faqs[st.session_state["lang"]].get(q.lower().strip(), {
            "English": "Sorry, I can't answer that yet!",
            "родрооро┐ро┤рпН": "рооройрпНройро┐роХрпНроХро╡рпБроорпН, роЗродро▒рпНроХрпБ рокродро┐ро▓рпН роЗро▓рпНро▓рпИ!",
            "рд╣рд┐рдиреНрджреА": "рдорд╛рдлрд╝ рдХреАрдЬрд┐рдП, рдЗрд╕рдХрд╛ рдЙрддреНрддрд░ рдореЗрд░реЗ рдкрд╛рд╕ рдирд╣реАрдВ рд╣реИ!"
        }[st.session_state["lang"]])
        st.info(answer)

# --- COMMUNITY VIDEO/STORY SUBMISSION ---
def video_stories():
    st.header(L("add_story_video"))
    stories = load_datafile(STORIES_FILE, [])
    title = st.text_input(L("story_title"))
    desc = st.text_area(L("story_desc"))
    youtube = st.text_input(L("video_url"), placeholder="https://www.youtube.com/embed/...")
    if st.button(L("submit_video")):
        if youtube:
            stories.append({
                "user": st.session_state["user_id"],
                "title": title,
                "desc": desc,
                "youtube": youtube,
                "time": datetime.now().isoformat()
            })
            save_datafile(STORIES_FILE, stories)
            st.success(L("video_submitted"))
            st.experimental_rerun()
    back_button("home")

def show_video_stories():
    st.header(L("video_section"))
    stories = load_datafile(STORIES_FILE, [])
    if not stories:
        st.info(L("no_video_stories"))
    for s in stories[::-1]:
        st.markdown(f"### {s['title'] if s['title'] else '(No Title)'}")
        st.write(f"by **{s['user']}** at {s['time'][:16].replace('T',' ')}")
        if s.get("youtube"):
            st.video(s["youtube"])
        if s.get("desc"):
            st.write(s["desc"])
        st.markdown("---")
    back_button("home")
# --- CIRCULAR ECONOMY DB, MICRO UNITS, CARBON FACTORS, GEOLOCATOR ---
reuse_db = {
    "cotton scraps": ["ЁЯз╕ Toy Stuffing", "ЁЯз╡ Yarn Recyclers"],
    "metal scraps": ["тЪЩ Metal Artist", "ЁЯкС Furniture Maker"],
    "food waste": ["ЁЯМ▒ Composting", "ЁЯФе Biogas"],
    "sawdust": ["ЁЯк╡ Board Makers", "ЁЯФе Briquette Units"],
    "paper waste": ["ЁЯУЪ Stationery", "ЁЯУж Packaging"]
}
micro_units = {
    "cotton scraps": {"unit": "Stuffing Unit", "tool": "Shredder (тВ╣8,000)", "roi": "2 months"},
    "metal scraps": {"unit": "Art Studio", "tool": "Welder (тВ╣12,000)", "roi": "тВ╣6,000/month"},
    "food waste": {"unit": "Compost Bin", "tool": "Bin (тВ╣2,000)", "roi": "тВ╣1,500/month"},
    "sawdust": {"unit": "Briquette Unit", "tool": "Press (тВ╣15,000)", "roi": "тВ╣3,000/month"},
    "paper waste": {"unit": "Paper Unit", "tool": "Pulper (тВ╣10,000)", "roi": "тВ╣2,500/month"}
}
carbon_factors = {
    "cotton scraps": 2.5, "metal scraps": 6.0, "food waste": 1.8,
    "sawdust": 2.2, "paper waste": 2.9
}
geolocator = Nominatim(user_agent="bioloop")

def generate_trace_hash(entry):
    raw = f"{entry['material']}{entry['quantity']}{entry['location']}_{entry['timestamp']}"
    return hashlib.sha256(raw.encode()).hexdigest()

# --- LOGIN/SIGNUP/HOME PAGES ---
def landing_page():
    col1, col2, col3 = st.columns([1,2,1])
    with col2:
        st.markdown(f"<div class='biol-title' style='text-align:center;'>тЩ╗ BioLoop</div>", unsafe_allow_html=True)
        st.markdown(f"<div class='biol-sub' style='text-align:center;'>Empowering Circular Economy for MSMEs</div>", unsafe_allow_html=True)
        lang_selector()
        st.button(L("login"), use_container_width=True, on_click=go, args=("login",))
        st.button(L("signup"), use_container_width=True, on_click=go, args=("signup",))
        st.button(L("faq_title"), use_container_width=True, on_click=go, args=("faq",))
        st.button(L("add_story_video"), use_container_width=True, on_click=go, args=("addvideo",))
        st.button(L("video_section"), use_container_width=True, on_click=go, args=("videos",))

def login_page():
    st.markdown(f"<div class='biol-title'>{L('login')}</div>", unsafe_allow_html=True)
    lang_selector()
    users = load_users()
    user = st.text_input("MSME ID")
    pw = st.text_input(L("password"), type="password")
    if st.button(L("login")):
        if user in users and users[user] == pw:
            st.session_state["authenticated"] = True
            st.session_state["user_id"] = user
            st.session_state["page"] = "home"
            st.experimental_rerun()
        else:
            st.error(L("invalid_login"))
    back_button("landing")

def signup_page():
    st.markdown(f"<div class='biol-title'>{L('signup')}</div>", unsafe_allow_html=True)
    lang_selector()
    users = load_users()
    new_id = st.text_input("Choose MSME ID")
    new_pw = st.text_input("Choose Password", type="password")
    if st.button(L("signup")):
        if new_id in users:
            st.error(L("duplicate_id"))
        elif not new_id or not new_pw:
            st.warning(L("missing_fields"))
        else:
            users[new_id] = new_pw
            save_users(users)
            st.success(L("account_created"))
            st.button(L("login"), on_click=go, args=("login",))
    back_button("landing")

def home_page():
    st.markdown(f"<div class='biol-title'>Hi, {st.session_state['user_id']}! {user_badge(st.session_state['user_id'])}</div>", unsafe_allow_html=True)
    st.markdown(f"<div class='biol-sub'>{L('browse')}</div>", unsafe_allow_html=True)
    if not st.session_state.get("verified"):
        verify_user()
    col1, col2 = st.columns(2)
    with col1:
        st.button("ЁЯУЭ " + L("submit"), on_click=go, args=("submit",), use_container_width=True)
        st.button("ЁЯСд " + L("my_submissions"), on_click=go, args=("dashboard",), use_container_width=True)
        st.button(L("register_interest"), on_click=go, args=("interest",), use_container_width=True)
        st.button("ЁЯУИ " + L("analytics"), on_click=go, args=("analytics",), use_container_width=True)
    with col2:
        st.button("ЁЯФН " + L("browse"), on_click=go, args=("browse",), use_container_width=True)
        st.button("ЁЯПн " + L("microplanner"), on_click=go, args=("microplanner",), use_container_width=True)
        st.button("ЁЯУд " + L("export"), on_click=go, args=("export",), use_container_width=True)
        st.button(L("faq_title"), on_click=go, args=("faq",), use_container_width=True)
        st.button(L("add_story_video"), on_click=go, args=("addvideo",), use_container_width=True)
        st.button(L("video_section"), on_click=go, args=("videos",), use_container_width=True)
    st.button(L("logout"), on_click=logout, use_container_width=True)
    back_button("landing")

def logout():
    st.session_state["authenticated"] = False
    st.session_state["user_id"] = ""
    st.session_state["page"] = "landing"
    st.experimental_rerun()

# --- SUBMIT WASTE ---
def submit_page():
    st.markdown(f"<div class='biol-title'>{L('header')}</div>", unsafe_allow_html=True)
    material_input = st.text_input(L("material"))
    material = None
    if material_input:
        match = process.extractOne(material_input.lower(), reuse_db.keys())
        if match:
            material = match[0]
            st.info(f"{L('matched')}: {material.title()} ({match[1]}%)")
    uploaded_img = st.file_uploader(L("upload_image"), type=["png", "jpg", "jpeg"])
    img_b64 = ""
    if uploaded_img:
        img_bytes = uploaded_img.read()
        img_b64 = base64.b64encode(img_bytes).decode()
    if material:
        quantity = st.number_input(L("quantity"), min_value=1)
        location = st.text_input(L("location"))
        contact = st.text_input(L("contact"))
        quality = st.selectbox(L("quality"), [L("clean"), L("mixed"), L("contaminated")])
        show_contact = st.checkbox(L("public_contact"), value=True)
        if st.button(L("submit")):
            valid = re.match(r"[^@]+@[^@]+\.[^@]+", contact) or re.match(r"\d{10}", contact)
            if not valid:
                st.warning(L("invalid_contact"))
            else:
                lat, lon = None, None
                try:
                    loc = geolocator.geocode(location)
                    if loc: lat, lon = loc.latitude, loc.longitude
                except: pass
                entry = {
                    "material": material,
                    "quantity": quantity,
                    "location": location,
                    "contact": contact if show_contact else "Hidden",
                    "lat": lat, "lon": lon,
                    "quality": quality,
                    "image": img_b64,
                    "timestamp": datetime.now().isoformat(),
                    "user_id": st.session_state["user_id"]
                }
                entry["trace_id"] = generate_trace_hash(entry)
                data = load_data()
                data.append(entry)
                save_data(data)
                st.success(L("success"))
                st.button(L("go_home"), on_click=go, args=("home",))
                return
    back_button("home")

# --- BROWSE WASTE LISTINGS (MARKETPLACE) ---
def browse_page():
    st.header(L("browse_waste"))
    data = load_data()
    df = pd.DataFrame(data)
    mat = st.selectbox(L("filter_material"), [L("all")] + list(reuse_db.keys()))
    loc = st.text_input(L("filter_location"))
    filtered = df
    if mat and mat != L("all"):
        filtered = filtered[filtered["material"] == mat]
    if loc:
        filtered = filtered[filtered["location"].str.contains(loc, case=False, na=False)]
    if filtered.empty:
        st.info(L("no_data"))
    else:
        for i, row in filtered.iterrows():
            st.markdown(f"### {row['material'].title()} тАФ {row['quantity']} {L('kg_week')}")
            if row.get("image"):
                st.image(base64.b64decode(row["image"]), width=200)
            st.write(f"**{L('location')}:** {row['location']}")
            st.write(f"**{L('quality')}:** {row['quality']}")
            st.write(f"**{L('contact')}:** {row['contact']}")
            st.write(f"**{L('rating')}:** {get_user_rating(row['user_id'])} тнР")
            st.write(f"**ID:** {row['trace_id'][:8]}")
            st.markdown("---")
    back_button("home")

# --- DASHBOARD (MY SUBMISSIONS) ---
def dashboard_page():
    st.header(L("my_submissions"))
    data = load_data()
    mydata = [d for d in data if d["user_id"] == st.session_state["user_id"]]
    if not mydata:
        st.info(L("no_entries"))
    else:
        for i, row in enumerate(mydata[::-1]):
            st.markdown(f"### {row['material'].title()} тАФ {row['quantity']} {L('kg_week')}")
            st.write(f"**{L('location')}:** {row['location']}")
            if row.get("image"):
                st.image(base64.b64decode(row["image"]), width=200)
            st.write(f"**{L('quality')}:** {row['quality']}")
            st.write(f"**ID:** {row['trace_id'][:8]}")
            if st.button("тЭМ " + L("delete_success"), key=f"del-{i}"):
                data.remove(row)
                save_data(data)
                st.success(L("delete_success"))
                st.experimental_rerun()
            st.markdown("---")
    back_button("home")

# --- INTEREST REGISTRATION ---
def interest_registration():
    st.subheader(L("register_interest"))
    mat = st.selectbox(L("interest_material"), list(reuse_db.keys()))
    loc = st.text_input(L("interest_location"))
    if st.button(L("register_interest")):
        interests = load_datafile(INTERESTS_FILE, [])
        interests.append({
            "user": st.session_state["user_id"],
            "material": mat,
            "location": loc,
            "time": datetime.now().isoformat()
        })
        save_datafile(INTERESTS_FILE, interests)
        st.success(L("interest_registered"))
    back_button("home")


# --- ANALYTICS / IMPACT DASHBOARD ---
def analytics_page():
    st.subheader(L("impact_dash"))
    data = load_data()
    df = pd.DataFrame(data)
    if not df.empty and "lat" in df and "lon" in df:
        st.map(df[["lat", "lon"]].dropna())
        leader = df.groupby("user_id")["quantity"].sum().sort_values(ascending=False).head(5)
        st.write(L("leaderboard"))
        for idx, (user, amt) in enumerate(leader.items(), 1):
            badge = ""
            if idx == 1: badge = L("badge_gold")
            elif idx == 2: badge = L("badge_silver")
            elif idx == 3: badge = L("badge_bronze")
            st.write(f"{idx}. {user} тАФ {amt} kg/week {badge}")
        user_amt = leader.get(st.session_state["user_id"], 0)
        if user_amt >= 100:
            st.success(L("badge_gold"))
        elif user_amt >= 50:
            st.info(L("badge_silver"))
        elif user_amt >= 20:
            st.info(L("badge_bronze"))
    else:
        st.info(L("no_data"))
    back_button("home")

# --- MICRO UNIT PLANNER ---
def microplanner_page():
    st.header(L("microplanner"))
    mat = st.selectbox(L("material"), list(micro_units.keys()))
    unit = micro_units[mat]
    st.write(f"**Unit:** {unit['unit']}")
    st.write(f"**Tool/Cost:** {unit['tool']}")
    st.write(f"**ROI:** {unit['roi']}")
    st.write(f"**Sample Reusers:** {', '.join(reuse_db[mat])}")
    st.info("This is a sample micro-unit business plan. Adapt as per your needs.")
    back_button("home")

# --- EXPORT DATA ---
def export_page():
    st.header(L("export"))
    data = load_data()
    df = pd.DataFrame(data)
    if not df.empty:
        buf = io.StringIO()
        df.to_csv(buf, index=False)
        st.download_button(L("download_csv"), buf.getvalue(), "waste_data.csv", "text/csv")
    else:
        st.info(L("no_data"))
    back_button("home")

# --- CERTIFICATE GENERATION ---
def generate_certificate(user_id, total_waste):
    if total_waste >= 50:
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=16)
        pdf.cell(200, 10, txt="BioLoop Green MSME Certificate", ln=True, align='C')
        pdf.cell(200, 10, txt=f"Awarded to {user_id}", ln=True, align='C')
        pdf.cell(200, 10, txt=f"For recycling {total_waste} kg waste", ln=True, align='C')
        buf = io.BytesIO()
        pdf.output(buf)
        st.download_button(L("download_cert"), buf.getvalue(), "certificate.pdf", "application/pdf")

def certificate_page():
    st.header(L("download_cert"))
    data = load_data()
    df = pd.DataFrame(data)
    total = df[df["user_id"] == st.session_state["user_id"]]["quantity"].sum() if not df.empty else 0
    generate_certificate(st.session_state["user_id"], total)
    back_button("home")

# --- HELPER: USER RATING ---
def get_user_rating(user_id):
    ratings = load_datafile(RATINGS_FILE, [])
    user_ratings = [r["rating"] for r in ratings if r["user"] == user_id]
    if user_ratings:
        return round(sum(user_ratings) / len(user_ratings), 1)
    else:
        return "N/A"

# --- MAIN LOOP ---
def main():
    pages = {
        "landing": landing_page,
        "login": login_page,
        "signup": signup_page,
        "home": home_page,
        "submit": submit_page,
        "browse": browse_page,
        "dashboard": dashboard_page,
        "export": export_page,
        "analytics": analytics_page,
        "microplanner": microplanner_page,
        "faq": faq_bot,
        "addvideo": video_stories,
        "videos": show_video_stories,
        "interest": interest_registration,
        "certificate": certificate_page,
        # Add more pages as you expand (messaging, admin, etc.)
    }
    page = st.session_state.get("page", "landing")
    if page in pages:
        pages[page]()
    else:
        landing_page()

if __name__ == "__main__":
    main()
